
LoopPedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007a50  08007a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a6c  08007a6c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007a6c  08007a6c  00017a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a74  08007a74  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a78  08007a78  00017a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  20000090  08007b0c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c0  08007b0c  000207c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001519b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eac  00000000  00000000  0003525b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  00038108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  00038e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023249  00000000  00000000  00039ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f705  00000000  00000000  0005cd29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca1be  00000000  00000000  0006c42e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001365ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000387c  00000000  00000000  00136668  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a38 	.word	0x08007a38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007a38 	.word	0x08007a38

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
static void MX_I2C1_Init(void);
void MX_USB_HOST_Process(void);


int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af04      	add	r7, sp, #16

  HAL_Init();
 80004ce:	f000 fb25 	bl	8000b1c <HAL_Init>

  SystemClock_Config();
 80004d2:	f000 f847 	bl	8000564 <SystemClock_Config>


  MX_GPIO_Init();
 80004d6:	f000 f8f5 	bl	80006c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004da:	f000 f8c5 	bl	8000668 <MX_I2C1_Init>
  MX_USB_HOST_Init();
 80004de:	f006 fea7 	bl	8007230 <MX_USB_HOST_Init>
  data[0] = 69;
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <main+0x8c>)
 80004e4:	2245      	movs	r2, #69	; 0x45
 80004e6:	701a      	strb	r2, [r3, #0]

  HAL_I2C_Mem_Write(&hi2c1, i2cAddr, 17, 0xFF, data, 1 , 10);
 80004e8:	230a      	movs	r3, #10
 80004ea:	9302      	str	r3, [sp, #8]
 80004ec:	2301      	movs	r3, #1
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <main+0x8c>)
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	23ff      	movs	r3, #255	; 0xff
 80004f6:	2211      	movs	r2, #17
 80004f8:	21a0      	movs	r1, #160	; 0xa0
 80004fa:	4817      	ldr	r0, [pc, #92]	; (8000558 <main+0x90>)
 80004fc:	f002 fcac 	bl	8002e58 <HAL_I2C_Mem_Write>
  HAL_Delay(10);
 8000500:	200a      	movs	r0, #10
 8000502:	f000 fb7d 	bl	8000c00 <HAL_Delay>

  HAL_I2C_Mem_Read(&hi2c1, i2cAddr, 17, 0xFF, &data[1], 1 , 10);
 8000506:	230a      	movs	r3, #10
 8000508:	9302      	str	r3, [sp, #8]
 800050a:	2301      	movs	r3, #1
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <main+0x94>)
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	23ff      	movs	r3, #255	; 0xff
 8000514:	2211      	movs	r2, #17
 8000516:	21a0      	movs	r1, #160	; 0xa0
 8000518:	480f      	ldr	r0, [pc, #60]	; (8000558 <main+0x90>)
 800051a:	f002 fd97 	bl	800304c <HAL_I2C_Mem_Read>
  HAL_Delay(10);
 800051e:	200a      	movs	r0, #10
 8000520:	f000 fb6e 	bl	8000c00 <HAL_Delay>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000524:	f006 feaa 	bl	800727c <MX_USB_HOST_Process>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800052e:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x98>)
 8000530:	f000 fe34 	bl	800119c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000538:	f000 fb62 	bl	8000c00 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000542:	4807      	ldr	r0, [pc, #28]	; (8000560 <main+0x98>)
 8000544:	f000 fe2a 	bl	800119c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000548:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800054c:	f000 fb58 	bl	8000c00 <HAL_Delay>
    MX_USB_HOST_Process();
 8000550:	e7e8      	b.n	8000524 <main+0x5c>
 8000552:	bf00      	nop
 8000554:	20000114 	.word	0x20000114
 8000558:	200000c0 	.word	0x200000c0
 800055c:	20000115 	.word	0x20000115
 8000560:	40020c00 	.word	0x40020c00

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b098      	sub	sp, #96	; 0x60
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f007 f99e 	bl	80078b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 031c 	add.w	r3, r7, #28
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	4b31      	ldr	r3, [pc, #196]	; (8000660 <SystemClock_Config+0xfc>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059e:	4a30      	ldr	r2, [pc, #192]	; (8000660 <SystemClock_Config+0xfc>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a4:	6413      	str	r3, [r2, #64]	; 0x40
 80005a6:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <SystemClock_Config+0xfc>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <SystemClock_Config+0x100>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a2a      	ldr	r2, [pc, #168]	; (8000664 <SystemClock_Config+0x100>)
 80005bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c0:	6013      	str	r3, [r2, #0]
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <SystemClock_Config+0x100>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ce:	2301      	movs	r3, #1
 80005d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e2:	2308      	movs	r3, #8
 80005e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f0:	2307      	movs	r3, #7
 80005f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 faa5 	bl	8003b48 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000604:	f000 f95c 	bl	80008c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000614:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000618:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	2105      	movs	r1, #5
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fcfe 	bl	8004028 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000632:	f000 f945 	bl	80008c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000636:	2301      	movs	r3, #1
 8000638:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800063a:	23c0      	movs	r3, #192	; 0xc0
 800063c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fecc 	bl	80043e4 <HAL_RCCEx_PeriphCLKConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000652:	f000 f935 	bl	80008c0 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3760      	adds	r7, #96	; 0x60
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_I2C1_Init>:

/* I2C 1 Init */
static void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0


  hi2c1.Instance = I2C1;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2C1_Init+0x50>)
 800066e:	4a13      	ldr	r2, [pc, #76]	; (80006bc <MX_I2C1_Init+0x54>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_I2C1_Init+0x58>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a6:	f002 fa9f 	bl	8002be8 <HAL_I2C_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b0:	f000 f906 	bl	80008c0 <Error_Handler>
  }

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000c0 	.word	0x200000c0
 80006bc:	40005400 	.word	0x40005400
 80006c0:	000186a0 	.word	0x000186a0

080006c4 <MX_GPIO_Init>:

/* GPIO Init */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	4b71      	ldr	r3, [pc, #452]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a70      	ldr	r2, [pc, #448]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 80006e4:	f043 0310 	orr.w	r3, r3, #16
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b6e      	ldr	r3, [pc, #440]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0310 	and.w	r3, r3, #16
 80006f2:	61bb      	str	r3, [r7, #24]
 80006f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	4b6a      	ldr	r3, [pc, #424]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a69      	ldr	r2, [pc, #420]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b67      	ldr	r3, [pc, #412]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	4b63      	ldr	r3, [pc, #396]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a62      	ldr	r2, [pc, #392]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b60      	ldr	r3, [pc, #384]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	4b5c      	ldr	r3, [pc, #368]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a5b      	ldr	r2, [pc, #364]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b59      	ldr	r3, [pc, #356]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b55      	ldr	r3, [pc, #340]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b52      	ldr	r3, [pc, #328]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b4e      	ldr	r3, [pc, #312]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a4d      	ldr	r2, [pc, #308]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b4b      	ldr	r3, [pc, #300]	; (80008a4 <MX_GPIO_Init+0x1e0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2108      	movs	r1, #8
 8000786:	4848      	ldr	r0, [pc, #288]	; (80008a8 <MX_GPIO_Init+0x1e4>)
 8000788:	f000 fd08 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2101      	movs	r1, #1
 8000790:	4846      	ldr	r0, [pc, #280]	; (80008ac <MX_GPIO_Init+0x1e8>)
 8000792:	f000 fd03 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000796:	2200      	movs	r2, #0
 8000798:	f24f 0110 	movw	r1, #61456	; 0xf010
 800079c:	4844      	ldr	r0, [pc, #272]	; (80008b0 <MX_GPIO_Init+0x1ec>)
 800079e:	f000 fcfd 	bl	800119c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007a2:	2308      	movs	r3, #8
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	483b      	ldr	r0, [pc, #236]	; (80008a8 <MX_GPIO_Init+0x1e4>)
 80007ba:	f000 fb55 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007be:	2301      	movs	r3, #1
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4835      	ldr	r0, [pc, #212]	; (80008ac <MX_GPIO_Init+0x1e8>)
 80007d6:	f000 fb47 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007da:	2308      	movs	r3, #8
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ea:	2305      	movs	r3, #5
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	482d      	ldr	r0, [pc, #180]	; (80008ac <MX_GPIO_Init+0x1e8>)
 80007f6:	f000 fb37 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007fe:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <MX_GPIO_Init+0x1f0>)
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	482a      	ldr	r0, [pc, #168]	; (80008b8 <MX_GPIO_Init+0x1f4>)
 800080e:	f000 fb2b 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000812:	2304      	movs	r3, #4
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4825      	ldr	r0, [pc, #148]	; (80008bc <MX_GPIO_Init+0x1f8>)
 8000826:	f000 fb1f 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800082a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083c:	2305      	movs	r3, #5
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	481d      	ldr	r0, [pc, #116]	; (80008bc <MX_GPIO_Init+0x1f8>)
 8000848:	f000 fb0e 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800084c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000850:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4812      	ldr	r0, [pc, #72]	; (80008b0 <MX_GPIO_Init+0x1ec>)
 8000866:	f000 faff 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800086a:	2320      	movs	r3, #32
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <MX_GPIO_Init+0x1ec>)
 800087e:	f000 faf3 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000882:	2302      	movs	r3, #2
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_GPIO_Init+0x1f0>)
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_GPIO_Init+0x1e4>)
 8000896:	f000 fae7 	bl	8000e68 <HAL_GPIO_Init>

}
 800089a:	bf00      	nop
 800089c:	3730      	adds	r7, #48	; 0x30
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40020800 	.word	0x40020800
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	10120000 	.word	0x10120000
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40020400 	.word	0x40020400

080008c0 <Error_Handler>:


void Error_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	while(1){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80008c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c8:	4801      	ldr	r0, [pc, #4]	; (80008d0 <Error_Handler+0x10>)
 80008ca:	f000 fc80 	bl	80011ce <HAL_GPIO_TogglePin>
 80008ce:	e7f9      	b.n	80008c4 <Error_Handler+0x4>
 80008d0:	40020c00 	.word	0x40020c00

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <HAL_MspInit+0x4c>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000912:	2007      	movs	r0, #7
 8000914:	f000 fa66 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <HAL_I2C_MspInit+0xa4>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d13c      	bne.n	80009c0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <HAL_I2C_MspInit+0xa8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <HAL_I2C_MspInit+0xa8>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <HAL_I2C_MspInit+0xa8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin;
 8000962:	2340      	movs	r3, #64	; 0x40
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000966:	2312      	movs	r3, #18
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096a:	2301      	movs	r3, #1
 800096c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000972:	2304      	movs	r3, #4
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Audio_SCL_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4814      	ldr	r0, [pc, #80]	; (80009d0 <HAL_I2C_MspInit+0xac>)
 800097e:	f000 fa73 	bl	8000e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098c:	2301      	movs	r3, #1
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000994:	2304      	movs	r3, #4
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	480c      	ldr	r0, [pc, #48]	; (80009d0 <HAL_I2C_MspInit+0xac>)
 80009a0:	f000 fa62 	bl	8000e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_I2C_MspInit+0xa8>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_I2C_MspInit+0xa8>)
 80009ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_I2C_MspInit+0xa8>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40005400 	.word	0x40005400
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020400 	.word	0x40020400

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <MemManage_Handler+0x4>

080009ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a28:	f000 f8ca 	bl	8000bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <OTG_FS_IRQHandler+0x10>)
 8000a36:	f000 fe75 	bl	8001724 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200004f8 	.word	0x200004f8

08000a44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <_sbrk+0x50>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <_sbrk+0x16>
		heap_end = &end;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <_sbrk+0x50>)
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <_sbrk+0x54>)
 8000a58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <_sbrk+0x50>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <_sbrk+0x50>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	466a      	mov	r2, sp
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d907      	bls.n	8000a7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a6e:	f006 fee7 	bl	8007840 <__errno>
 8000a72:	4602      	mov	r2, r0
 8000a74:	230c      	movs	r3, #12
 8000a76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a7c:	e006      	b.n	8000a8c <_sbrk+0x48>
	}

	heap_end += incr;
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <_sbrk+0x50>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <_sbrk+0x50>)
 8000a88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000ac 	.word	0x200000ac
 8000a98:	200007c0 	.word	0x200007c0

08000a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <SystemInit+0x28>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa6:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <SystemInit+0x28>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SystemInit+0x28>)
 8000ab2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ab6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000acc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ace:	e003      	b.n	8000ad8 <LoopCopyDataInit>

08000ad0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ad2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ad4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ad6:	3104      	adds	r1, #4

08000ad8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000adc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ade:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ae0:	d3f6      	bcc.n	8000ad0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ae4:	e002      	b.n	8000aec <LoopFillZerobss>

08000ae6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ae6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ae8:	f842 3b04 	str.w	r3, [r2], #4

08000aec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000af0:	d3f9      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000af2:	f7ff ffd3 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f006 fea9 	bl	800784c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fce5 	bl	80004c8 <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b04:	08007a7c 	.word	0x08007a7c
  ldr  r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b0c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000b10:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000b14:	200007c0 	.word	0x200007c0

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <HAL_Init+0x40>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_Init+0x40>)
 8000b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_Init+0x40>)
 8000b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f94d 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f000 f808 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff fec0 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023c00 	.word	0x40023c00

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_InitTick+0x54>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_InitTick+0x58>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f965 	bl	8000e4e <HAL_SYSTICK_Config>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00e      	b.n	8000bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d80a      	bhi.n	8000baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b9c:	f000 f92d 	bl	8000dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba0:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <HAL_InitTick+0x5c>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_IncTick+0x20>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_IncTick+0x24>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_IncTick+0x24>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008
 8000be4:	2000011c 	.word	0x2000011c

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2000011c 	.word	0x2000011c

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff ffee 	bl	8000be8 <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_Delay+0x40>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c26:	bf00      	nop
 8000c28:	f7ff ffde 	bl	8000be8 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
  {
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000008 	.word	0x20000008

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4907      	ldr	r1, [pc, #28]	; (8000ce0 <__NVIC_EnableIRQ+0x38>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff29 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff3e 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff8e 	bl	8000d38 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5d 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff31 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffa2 	bl	8000da0 <SysTick_Config>
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	e16b      	b.n	800115c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 815a 	bne.w	8001156 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d00b      	beq.n	8000ec2 <HAL_GPIO_Init+0x5a>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb6:	2b11      	cmp	r3, #17
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b12      	cmp	r3, #18
 8000ec0:	d130      	bne.n	8000f24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	f003 0201 	and.w	r2, r3, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0xfc>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b12      	cmp	r3, #18
 8000f62:	d123      	bne.n	8000fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	69b9      	ldr	r1, [r7, #24]
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0203 	and.w	r2, r3, #3
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80b4 	beq.w	8001156 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b5f      	ldr	r3, [pc, #380]	; (8001170 <HAL_GPIO_Init+0x308>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a5e      	ldr	r2, [pc, #376]	; (8001170 <HAL_GPIO_Init+0x308>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b5c      	ldr	r3, [pc, #368]	; (8001170 <HAL_GPIO_Init+0x308>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100a:	4a5a      	ldr	r2, [pc, #360]	; (8001174 <HAL_GPIO_Init+0x30c>)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a51      	ldr	r2, [pc, #324]	; (8001178 <HAL_GPIO_Init+0x310>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d02b      	beq.n	800108e <HAL_GPIO_Init+0x226>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a50      	ldr	r2, [pc, #320]	; (800117c <HAL_GPIO_Init+0x314>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d025      	beq.n	800108a <HAL_GPIO_Init+0x222>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4f      	ldr	r2, [pc, #316]	; (8001180 <HAL_GPIO_Init+0x318>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d01f      	beq.n	8001086 <HAL_GPIO_Init+0x21e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4e      	ldr	r2, [pc, #312]	; (8001184 <HAL_GPIO_Init+0x31c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d019      	beq.n	8001082 <HAL_GPIO_Init+0x21a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4d      	ldr	r2, [pc, #308]	; (8001188 <HAL_GPIO_Init+0x320>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0x216>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4c      	ldr	r2, [pc, #304]	; (800118c <HAL_GPIO_Init+0x324>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00d      	beq.n	800107a <HAL_GPIO_Init+0x212>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4b      	ldr	r2, [pc, #300]	; (8001190 <HAL_GPIO_Init+0x328>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d007      	beq.n	8001076 <HAL_GPIO_Init+0x20e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4a      	ldr	r2, [pc, #296]	; (8001194 <HAL_GPIO_Init+0x32c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_GPIO_Init+0x20a>
 800106e:	2307      	movs	r3, #7
 8001070:	e00e      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001072:	2308      	movs	r3, #8
 8001074:	e00c      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001076:	2306      	movs	r3, #6
 8001078:	e00a      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800107a:	2305      	movs	r3, #5
 800107c:	e008      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800107e:	2304      	movs	r3, #4
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001082:	2303      	movs	r3, #3
 8001084:	e004      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001086:	2302      	movs	r3, #2
 8001088:	e002      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800108e:	2300      	movs	r3, #0
 8001090:	69fa      	ldr	r2, [r7, #28]
 8001092:	f002 0203 	and.w	r2, r2, #3
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	4093      	lsls	r3, r2
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a0:	4934      	ldr	r1, [pc, #208]	; (8001174 <HAL_GPIO_Init+0x30c>)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <HAL_GPIO_Init+0x330>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d2:	4a31      	ldr	r2, [pc, #196]	; (8001198 <HAL_GPIO_Init+0x330>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010d8:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <HAL_GPIO_Init+0x330>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010fc:	4a26      	ldr	r2, [pc, #152]	; (8001198 <HAL_GPIO_Init+0x330>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_GPIO_Init+0x330>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <HAL_GPIO_Init+0x330>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_GPIO_Init+0x330>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001150:	4a11      	ldr	r2, [pc, #68]	; (8001198 <HAL_GPIO_Init+0x330>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	f67f ae90 	bls.w	8000e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001164:	bf00      	nop
 8001166:	3724      	adds	r7, #36	; 0x24
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	40023800 	.word	0x40023800
 8001174:	40013800 	.word	0x40013800
 8001178:	40020000 	.word	0x40020000
 800117c:	40020400 	.word	0x40020400
 8001180:	40020800 	.word	0x40020800
 8001184:	40020c00 	.word	0x40020c00
 8001188:	40021000 	.word	0x40021000
 800118c:	40021400 	.word	0x40021400
 8001190:	40021800 	.word	0x40021800
 8001194:	40021c00 	.word	0x40021c00
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	401a      	ands	r2, r3
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d104      	bne.n	80011f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	041a      	lsls	r2, r3, #16
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001206:	b08f      	sub	sp, #60	; 0x3c
 8001208:	af0a      	add	r7, sp, #40	; 0x28
 800120a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e054      	b.n	80012c0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d106      	bne.n	8001236 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f006 f85b 	bl	80072ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2203      	movs	r2, #3
 800123a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fa19 	bl	800468c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	687e      	ldr	r6, [r7, #4]
 8001262:	466d      	mov	r5, sp
 8001264:	f106 0410 	add.w	r4, r6, #16
 8001268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001270:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001274:	e885 0003 	stmia.w	r5, {r0, r1}
 8001278:	1d33      	adds	r3, r6, #4
 800127a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f003 f993 	bl	80045a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2101      	movs	r1, #1
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fa10 	bl	80046ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	687e      	ldr	r6, [r7, #4]
 8001296:	466d      	mov	r5, sp
 8001298:	f106 0410 	add.w	r4, r6, #16
 800129c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800129e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80012ac:	1d33      	adds	r3, r6, #4
 80012ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b0:	6838      	ldr	r0, [r7, #0]
 80012b2:	f003 fb23 	bl	80048fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012c8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af04      	add	r7, sp, #16
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	70fb      	strb	r3, [r7, #3]
 80012da:	460b      	mov	r3, r1
 80012dc:	70bb      	strb	r3, [r7, #2]
 80012de:	4613      	mov	r3, r2
 80012e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <HAL_HCD_HC_Init+0x28>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e07f      	b.n	80013f0 <HAL_HCD_HC_Init+0x128>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80012f8:	78fa      	ldrb	r2, [r7, #3]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	333d      	adds	r3, #61	; 0x3d
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800130c:	78fa      	ldrb	r2, [r7, #3]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	3338      	adds	r3, #56	; 0x38
 800131c:	787a      	ldrb	r2, [r7, #1]
 800131e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001320:	78fa      	ldrb	r2, [r7, #3]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	3340      	adds	r3, #64	; 0x40
 8001330:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001332:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001334:	78fa      	ldrb	r2, [r7, #3]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	3339      	adds	r3, #57	; 0x39
 8001344:	78fa      	ldrb	r2, [r7, #3]
 8001346:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001348:	78fa      	ldrb	r2, [r7, #3]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	333f      	adds	r3, #63	; 0x3f
 8001358:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800135c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800135e:	78fa      	ldrb	r2, [r7, #3]
 8001360:	78bb      	ldrb	r3, [r7, #2]
 8001362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001366:	b2d8      	uxtb	r0, r3
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	440b      	add	r3, r1
 8001374:	333a      	adds	r3, #58	; 0x3a
 8001376:	4602      	mov	r2, r0
 8001378:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800137a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800137e:	2b00      	cmp	r3, #0
 8001380:	da0a      	bge.n	8001398 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001382:	78fa      	ldrb	r2, [r7, #3]
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	440b      	add	r3, r1
 8001390:	333b      	adds	r3, #59	; 0x3b
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	e009      	b.n	80013ac <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001398:	78fa      	ldrb	r2, [r7, #3]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	333b      	adds	r3, #59	; 0x3b
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	440b      	add	r3, r1
 80013ba:	333c      	adds	r3, #60	; 0x3c
 80013bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013c0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	787c      	ldrb	r4, [r7, #1]
 80013c8:	78ba      	ldrb	r2, [r7, #2]
 80013ca:	78f9      	ldrb	r1, [r7, #3]
 80013cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	4623      	mov	r3, r4
 80013de:	f003 fc0f 	bl	8004c00 <USB_HC_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd90      	pop	{r4, r7, pc}

080013f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_HCD_HC_Halt+0x1e>
 8001412:	2302      	movs	r3, #2
 8001414:	e00f      	b.n	8001436 <HAL_HCD_HC_Halt+0x3e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	78fa      	ldrb	r2, [r7, #3]
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fe49 	bl	80050be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001434:	7bfb      	ldrb	r3, [r7, #15]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4608      	mov	r0, r1
 800144a:	4611      	mov	r1, r2
 800144c:	461a      	mov	r2, r3
 800144e:	4603      	mov	r3, r0
 8001450:	70fb      	strb	r3, [r7, #3]
 8001452:	460b      	mov	r3, r1
 8001454:	70bb      	strb	r3, [r7, #2]
 8001456:	4613      	mov	r3, r2
 8001458:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800145a:	78fa      	ldrb	r2, [r7, #3]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	440b      	add	r3, r1
 8001468:	333b      	adds	r3, #59	; 0x3b
 800146a:	78ba      	ldrb	r2, [r7, #2]
 800146c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800146e:	78fa      	ldrb	r2, [r7, #3]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	333f      	adds	r3, #63	; 0x3f
 800147e:	787a      	ldrb	r2, [r7, #1]
 8001480:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001482:	7c3b      	ldrb	r3, [r7, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d114      	bne.n	80014b2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001488:	78fa      	ldrb	r2, [r7, #3]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	440b      	add	r3, r1
 8001496:	3342      	adds	r3, #66	; 0x42
 8001498:	2203      	movs	r2, #3
 800149a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800149c:	78fa      	ldrb	r2, [r7, #3]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	440b      	add	r3, r1
 80014aa:	333d      	adds	r3, #61	; 0x3d
 80014ac:	7f3a      	ldrb	r2, [r7, #28]
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e009      	b.n	80014c6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014b2:	78fa      	ldrb	r2, [r7, #3]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	3342      	adds	r3, #66	; 0x42
 80014c2:	2202      	movs	r2, #2
 80014c4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80014c6:	787b      	ldrb	r3, [r7, #1]
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	f200 80d6 	bhi.w	800167a <HAL_HCD_HC_SubmitRequest+0x23a>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	08001665 	.word	0x08001665
 80014dc:	08001551 	.word	0x08001551
 80014e0:	080015db 	.word	0x080015db
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80014e4:	7c3b      	ldrb	r3, [r7, #16]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	f040 80c9 	bne.w	800167e <HAL_HCD_HC_SubmitRequest+0x23e>
 80014ec:	78bb      	ldrb	r3, [r7, #2]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f040 80c5 	bne.w	800167e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80014f4:	8b3b      	ldrh	r3, [r7, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80014fa:	78fa      	ldrb	r2, [r7, #3]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	3351      	adds	r3, #81	; 0x51
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800150e:	78fa      	ldrb	r2, [r7, #3]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	440b      	add	r3, r1
 800151c:	3351      	adds	r3, #81	; 0x51
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10a      	bne.n	800153a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001524:	78fa      	ldrb	r2, [r7, #3]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	440b      	add	r3, r1
 8001532:	3342      	adds	r3, #66	; 0x42
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001538:	e0a1      	b.n	800167e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800153a:	78fa      	ldrb	r2, [r7, #3]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	3342      	adds	r3, #66	; 0x42
 800154a:	2202      	movs	r2, #2
 800154c:	701a      	strb	r2, [r3, #0]
      break;
 800154e:	e096      	b.n	800167e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001550:	78bb      	ldrb	r3, [r7, #2]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d120      	bne.n	8001598 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001556:	78fa      	ldrb	r2, [r7, #3]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	3351      	adds	r3, #81	; 0x51
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10a      	bne.n	8001582 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800156c:	78fa      	ldrb	r2, [r7, #3]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	3342      	adds	r3, #66	; 0x42
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001580:	e07e      	b.n	8001680 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	3342      	adds	r3, #66	; 0x42
 8001592:	2202      	movs	r2, #2
 8001594:	701a      	strb	r2, [r3, #0]
      break;
 8001596:	e073      	b.n	8001680 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	440b      	add	r3, r1
 80015a6:	3350      	adds	r3, #80	; 0x50
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10a      	bne.n	80015c4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	3342      	adds	r3, #66	; 0x42
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
      break;
 80015c2:	e05d      	b.n	8001680 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	3342      	adds	r3, #66	; 0x42
 80015d4:	2202      	movs	r2, #2
 80015d6:	701a      	strb	r2, [r3, #0]
      break;
 80015d8:	e052      	b.n	8001680 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80015da:	78bb      	ldrb	r3, [r7, #2]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d120      	bne.n	8001622 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80015e0:	78fa      	ldrb	r2, [r7, #3]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	3351      	adds	r3, #81	; 0x51
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10a      	bne.n	800160c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	3342      	adds	r3, #66	; 0x42
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800160a:	e039      	b.n	8001680 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800160c:	78fa      	ldrb	r2, [r7, #3]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	3342      	adds	r3, #66	; 0x42
 800161c:	2202      	movs	r2, #2
 800161e:	701a      	strb	r2, [r3, #0]
      break;
 8001620:	e02e      	b.n	8001680 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001622:	78fa      	ldrb	r2, [r7, #3]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	3350      	adds	r3, #80	; 0x50
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10a      	bne.n	800164e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	3342      	adds	r3, #66	; 0x42
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
      break;
 800164c:	e018      	b.n	8001680 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800164e:	78fa      	ldrb	r2, [r7, #3]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	3342      	adds	r3, #66	; 0x42
 800165e:	2202      	movs	r2, #2
 8001660:	701a      	strb	r2, [r3, #0]
      break;
 8001662:	e00d      	b.n	8001680 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001664:	78fa      	ldrb	r2, [r7, #3]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	3342      	adds	r3, #66	; 0x42
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
      break;
 8001678:	e002      	b.n	8001680 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800167a:	bf00      	nop
 800167c:	e000      	b.n	8001680 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800167e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001680:	78fa      	ldrb	r2, [r7, #3]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	440b      	add	r3, r1
 800168e:	3344      	adds	r3, #68	; 0x44
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001694:	78fa      	ldrb	r2, [r7, #3]
 8001696:	8b39      	ldrh	r1, [r7, #24]
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4403      	add	r3, r0
 80016a4:	3348      	adds	r3, #72	; 0x48
 80016a6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80016a8:	78fa      	ldrb	r2, [r7, #3]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	335c      	adds	r3, #92	; 0x5c
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	334c      	adds	r3, #76	; 0x4c
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016d0:	78fa      	ldrb	r2, [r7, #3]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3339      	adds	r3, #57	; 0x39
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	335d      	adds	r3, #93	; 0x5d
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	3338      	adds	r3, #56	; 0x38
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	18d1      	adds	r1, r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	f003 fb7e 	bl	8004e14 <USB_HC_StartXfer>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop

08001724 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f003 f89b 	bl	8004876 <USB_GetMode>
 8001740:	4603      	mov	r3, r0
 8001742:	2b01      	cmp	r3, #1
 8001744:	f040 80ef 	bne.w	8001926 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f003 f87f 	bl	8004850 <USB_ReadInterrupts>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80e5 	beq.w	8001924 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f003 f876 	bl	8004850 <USB_ReadInterrupts>
 8001764:	4603      	mov	r3, r0
 8001766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800176e:	d104      	bne.n	800177a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001778:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f003 f866 	bl	8004850 <USB_ReadInterrupts>
 8001784:	4603      	mov	r3, r0
 8001786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800178e:	d104      	bne.n	800179a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001798:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 f856 	bl	8004850 <USB_ReadInterrupts>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80017ae:	d104      	bne.n	80017ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 f846 	bl	8004850 <USB_ReadInterrupts>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d103      	bne.n	80017d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2202      	movs	r2, #2
 80017d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 f838 	bl	8004850 <USB_ReadInterrupts>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ea:	d115      	bne.n	8001818 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017f4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d108      	bne.n	8001818 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f005 fdee 	bl	80073e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f003 f92e 	bl	8004a74 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f003 f817 	bl	8004850 <USB_ReadInterrupts>
 8001822:	4603      	mov	r3, r0
 8001824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800182c:	d102      	bne.n	8001834 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f001 f966 	bl	8002b00 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f003 f809 	bl	8004850 <USB_ReadInterrupts>
 800183e:	4603      	mov	r3, r0
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b08      	cmp	r3, #8
 8001846:	d106      	bne.n	8001856 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f005 fdb1 	bl	80073b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2208      	movs	r2, #8
 8001854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f002 fff8 	bl	8004850 <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800186a:	d138      	bne.n	80018de <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fc13 	bl	800509c <USB_HC_ReadInterrupt>
 8001876:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e025      	b.n	80018ca <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d018      	beq.n	80018c4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018a8:	d106      	bne.n	80018b8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4619      	mov	r1, r3
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f8cf 	bl	8001a54 <HCD_HC_IN_IRQHandler>
 80018b6:	e005      	b.n	80018c4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fcfd 	bl	80022be <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3301      	adds	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d3d4      	bcc.n	800187e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 ffb4 	bl	8004850 <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b10      	cmp	r3, #16
 80018f0:	d101      	bne.n	80018f6 <HAL_HCD_IRQHandler+0x1d2>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_HCD_IRQHandler+0x1d4>
 80018f6:	2300      	movs	r3, #0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d014      	beq.n	8001926 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0210 	bic.w	r2, r2, #16
 800190a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f001 f84b 	bl	80029a8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699a      	ldr	r2, [r3, #24]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0210 	orr.w	r2, r2, #16
 8001920:	619a      	str	r2, [r3, #24]
 8001922:	e000      	b.n	8001926 <HAL_HCD_IRQHandler+0x202>
      return;
 8001924:	bf00      	nop
    }
  }
}
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_HCD_Start+0x16>
 800193e:	2302      	movs	r3, #2
 8001940:	e013      	b.n	800196a <HAL_HCD_Start+0x3e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f002 fe8b 	bl	800466a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	4618      	mov	r0, r3
 800195c:	f003 f8ee 	bl	8004b3c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_HCD_Stop+0x16>
 8001984:	2302      	movs	r3, #2
 8001986:	e00d      	b.n	80019a4 <HAL_HCD_Stop+0x32>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f003 fccd 	bl	8005334 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 f895 	bl	8004ae8 <USB_ResetPort>
 80019be:	4603      	mov	r3, r0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	335c      	adds	r3, #92	; 0x5c
 80019e4:	781b      	ldrb	r3, [r3, #0]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	334c      	adds	r3, #76	; 0x4c
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 f8d7 	bl	8004bdc <USB_GetCurrentFrame>
 8001a2e:	4603      	mov	r3, r0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f003 f8b2 	bl	8004bae <USB_GetHostSpeed>
 8001a4a:	4603      	mov	r3, r0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d119      	bne.n	8001ab8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	015a      	lsls	r2, r3, #5
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a90:	461a      	mov	r2, r3
 8001a92:	2304      	movs	r3, #4
 8001a94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	015a      	lsls	r2, r3, #5
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	0151      	lsls	r1, r2, #5
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	440a      	add	r2, r1
 8001aac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	60d3      	str	r3, [r2, #12]
 8001ab6:	e0ce      	b.n	8001c56 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	015a      	lsls	r2, r3, #5
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ace:	d12c      	bne.n	8001b2a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	015a      	lsls	r2, r3, #5
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001adc:	461a      	mov	r2, r3
 8001ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	335d      	adds	r3, #93	; 0x5d
 8001af4:	2207      	movs	r2, #7
 8001af6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	015a      	lsls	r2, r3, #5
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4413      	add	r3, r2
 8001b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	0151      	lsls	r1, r2, #5
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	440a      	add	r2, r1
 8001b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b12:	f043 0302 	orr.w	r3, r3, #2
 8001b16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	4611      	mov	r1, r2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 facb 	bl	80050be <USB_HC_Halt>
 8001b28:	e095      	b.n	8001c56 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	015a      	lsls	r2, r3, #5
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4413      	add	r3, r2
 8001b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	d109      	bne.n	8001b54 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	015a      	lsls	r2, r3, #5
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4413      	add	r3, r2
 8001b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2320      	movs	r3, #32
 8001b50:	6093      	str	r3, [r2, #8]
 8001b52:	e080      	b.n	8001c56 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	015a      	lsls	r2, r3, #5
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d134      	bne.n	8001bd4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	015a      	lsls	r2, r3, #5
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	0151      	lsls	r1, r2, #5
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	440a      	add	r2, r1
 8001b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	335d      	adds	r3, #93	; 0x5d
 8001b9a:	2205      	movs	r2, #5
 8001b9c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	015a      	lsls	r2, r3, #5
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001baa:	461a      	mov	r2, r3
 8001bac:	2310      	movs	r3, #16
 8001bae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 fa76 	bl	80050be <USB_HC_Halt>
 8001bd2:	e040      	b.n	8001c56 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bea:	d134      	bne.n	8001c56 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	0151      	lsls	r1, r2, #5
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	440a      	add	r2, r1
 8001c02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c06:	f043 0302 	orr.w	r3, r3, #2
 8001c0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fa51 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	015a      	lsls	r2, r3, #5
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2310      	movs	r3, #16
 8001c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	335d      	adds	r3, #93	; 0x5d
 8001c3e:	2208      	movs	r2, #8
 8001c40:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	015a      	lsls	r2, r3, #5
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c54:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c6c:	d122      	bne.n	8001cb4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	0151      	lsls	r1, r2, #5
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	440a      	add	r2, r1
 8001c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 fa10 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	015a      	lsls	r2, r3, #5
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001caa:	461a      	mov	r2, r3
 8001cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001cb2:	e300      	b.n	80022b6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	f040 80fd 	bne.w	8001ec6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01b      	beq.n	8001d0c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3348      	adds	r3, #72	; 0x48
 8001ce4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	0159      	lsls	r1, r3, #5
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	440b      	add	r3, r1
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001cf8:	1ad1      	subs	r1, r2, r3
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4403      	add	r3, r0
 8001d08:	334c      	adds	r3, #76	; 0x4c
 8001d0a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	335d      	adds	r3, #93	; 0x5d
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3358      	adds	r3, #88	; 0x58
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d40:	461a      	mov	r2, r3
 8001d42:	2301      	movs	r3, #1
 8001d44:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	333f      	adds	r3, #63	; 0x3f
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00a      	beq.n	8001d72 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	333f      	adds	r3, #63	; 0x3f
 8001d6c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d121      	bne.n	8001db6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	0151      	lsls	r1, r2, #5
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	440a      	add	r2, r1
 8001d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 f98e 	bl	80050be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	461a      	mov	r2, r3
 8001db0:	2310      	movs	r3, #16
 8001db2:	6093      	str	r3, [r2, #8]
 8001db4:	e070      	b.n	8001e98 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	333f      	adds	r3, #63	; 0x3f
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d12a      	bne.n	8001e22 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	0151      	lsls	r1, r2, #5
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	440a      	add	r2, r1
 8001de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001de6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dea:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	335c      	adds	r3, #92	; 0x5c
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	b2d8      	uxtb	r0, r3
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	335c      	adds	r3, #92	; 0x5c
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	4601      	mov	r1, r0
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f005 faf2 	bl	8007404 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001e20:	e03a      	b.n	8001e98 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	333f      	adds	r3, #63	; 0x3f
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d12f      	bne.n	8001e98 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	335c      	adds	r3, #92	; 0x5c
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	3350      	adds	r3, #80	; 0x50
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	f083 0301 	eor.w	r3, r3, #1
 8001e62:	b2d8      	uxtb	r0, r3
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	440b      	add	r3, r1
 8001e72:	3350      	adds	r3, #80	; 0x50
 8001e74:	4602      	mov	r2, r0
 8001e76:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	b2d8      	uxtb	r0, r3
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	440b      	add	r3, r1
 8001e8a:	335c      	adds	r3, #92	; 0x5c
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4601      	mov	r1, r0
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f005 fab6 	bl	8007404 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3350      	adds	r3, #80	; 0x50
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	f083 0301 	eor.w	r3, r3, #1
 8001eae:	b2d8      	uxtb	r0, r3
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3350      	adds	r3, #80	; 0x50
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	701a      	strb	r2, [r3, #0]
}
 8001ec4:	e1f7      	b.n	80022b6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	015a      	lsls	r2, r3, #5
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	f040 811a 	bne.w	8002112 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	0151      	lsls	r1, r2, #5
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	440a      	add	r2, r1
 8001ef4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ef8:	f023 0302 	bic.w	r3, r3, #2
 8001efc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	335d      	adds	r3, #93	; 0x5d
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10a      	bne.n	8001f2a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	335c      	adds	r3, #92	; 0x5c
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e0d9      	b.n	80020de <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	335d      	adds	r3, #93	; 0x5d
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d10a      	bne.n	8001f56 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	335c      	adds	r3, #92	; 0x5c
 8001f50:	2205      	movs	r2, #5
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	e0c3      	b.n	80020de <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	335d      	adds	r3, #93	; 0x5d
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b06      	cmp	r3, #6
 8001f6a:	d00a      	beq.n	8001f82 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	335d      	adds	r3, #93	; 0x5d
 8001f7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d156      	bne.n	8002030 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	3358      	adds	r3, #88	; 0x58
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	1c59      	adds	r1, r3, #1
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4403      	add	r3, r0
 8001fa4:	3358      	adds	r3, #88	; 0x58
 8001fa6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3358      	adds	r3, #88	; 0x58
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d914      	bls.n	8001fe8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	440b      	add	r3, r1
 8001fcc:	3358      	adds	r3, #88	; 0x58
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	335c      	adds	r3, #92	; 0x5c
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	e009      	b.n	8001ffc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	335c      	adds	r3, #92	; 0x5c
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002012:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800201a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	015a      	lsls	r2, r3, #5
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4413      	add	r3, r2
 8002024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002028:	461a      	mov	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e056      	b.n	80020de <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	440b      	add	r3, r1
 800203e:	335d      	adds	r3, #93	; 0x5d
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b03      	cmp	r3, #3
 8002044:	d123      	bne.n	800208e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	440b      	add	r3, r1
 8002054:	335c      	adds	r3, #92	; 0x5c
 8002056:	2202      	movs	r2, #2
 8002058:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002070:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002078:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002086:	461a      	mov	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	e027      	b.n	80020de <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	335d      	adds	r3, #93	; 0x5d
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b07      	cmp	r3, #7
 80020a2:	d11c      	bne.n	80020de <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	3358      	adds	r3, #88	; 0x58
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1c59      	adds	r1, r3, #1
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4403      	add	r3, r0
 80020c6:	3358      	adds	r3, #88	; 0x58
 80020c8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	335c      	adds	r3, #92	; 0x5c
 80020da:	2204      	movs	r2, #4
 80020dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ea:	461a      	mov	r2, r3
 80020ec:	2302      	movs	r3, #2
 80020ee:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	b2d8      	uxtb	r0, r3
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	335c      	adds	r3, #92	; 0x5c
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	4601      	mov	r1, r0
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f005 f97a 	bl	8007404 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002110:	e0d1      	b.n	80022b6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	d13e      	bne.n	80021a6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4413      	add	r3, r2
 8002130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	0151      	lsls	r1, r2, #5
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	440a      	add	r2, r1
 800213e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002142:	f043 0302 	orr.w	r3, r3, #2
 8002146:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	3358      	adds	r3, #88	; 0x58
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	1c59      	adds	r1, r3, #1
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4403      	add	r3, r0
 800216a:	3358      	adds	r3, #88	; 0x58
 800216c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	335d      	adds	r3, #93	; 0x5d
 800217e:	2206      	movs	r2, #6
 8002180:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f002 ff96 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	461a      	mov	r2, r3
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	6093      	str	r3, [r2, #8]
}
 80021a4:	e087      	b.n	80022b6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d17c      	bne.n	80022b6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	333f      	adds	r3, #63	; 0x3f
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d122      	bne.n	8002218 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	3358      	adds	r3, #88	; 0x58
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	0151      	lsls	r1, r2, #5
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	440a      	add	r2, r1
 80021fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f002 ff54 	bl	80050be <USB_HC_Halt>
 8002216:	e045      	b.n	80022a4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	333f      	adds	r3, #63	; 0x3f
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	333f      	adds	r3, #63	; 0x3f
 800223e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002240:	2b02      	cmp	r3, #2
 8002242:	d12f      	bne.n	80022a4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	3358      	adds	r3, #88	; 0x58
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d121      	bne.n	80022a4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	335d      	adds	r3, #93	; 0x5d
 8002270:	2203      	movs	r2, #3
 8002272:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	0151      	lsls	r1, r2, #5
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	440a      	add	r2, r1
 800228a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 ff0d 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b0:	461a      	mov	r2, r3
 80022b2:	2310      	movs	r3, #16
 80022b4:	6093      	str	r3, [r2, #8]
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d119      	bne.n	8002322 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	461a      	mov	r2, r3
 80022fc:	2304      	movs	r3, #4
 80022fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	0151      	lsls	r1, r2, #5
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	440a      	add	r2, r1
 8002316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800231a:	f043 0302 	orr.w	r3, r3, #2
 800231e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002320:	e33e      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b20      	cmp	r3, #32
 8002336:	d141      	bne.n	80023bc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	2320      	movs	r3, #32
 8002348:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	333d      	adds	r3, #61	; 0x3d
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	f040 831f 	bne.w	80029a0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	333d      	adds	r3, #61	; 0x3d
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	440b      	add	r3, r1
 8002384:	335c      	adds	r3, #92	; 0x5c
 8002386:	2202      	movs	r2, #2
 8002388:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4413      	add	r3, r2
 8002392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	0151      	lsls	r1, r2, #5
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	440a      	add	r2, r1
 80023a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f002 fe82 	bl	80050be <USB_HC_Halt>
}
 80023ba:	e2f1      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ce:	2b40      	cmp	r3, #64	; 0x40
 80023d0:	d13f      	bne.n	8002452 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	335d      	adds	r3, #93	; 0x5d
 80023e2:	2204      	movs	r2, #4
 80023e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	333d      	adds	r3, #61	; 0x3d
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	3358      	adds	r3, #88	; 0x58
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	0151      	lsls	r1, r2, #5
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	440a      	add	r2, r1
 8002424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f002 fe40 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4413      	add	r3, r2
 8002446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244a:	461a      	mov	r2, r3
 800244c:	2340      	movs	r3, #64	; 0x40
 800244e:	6093      	str	r3, [r2, #8]
}
 8002450:	e2a6      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002468:	d122      	bne.n	80024b0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4413      	add	r3, r2
 8002472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	0151      	lsls	r1, r2, #5
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	440a      	add	r2, r1
 8002480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f002 fe12 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	461a      	mov	r2, r3
 80024a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ac:	6093      	str	r3, [r2, #8]
}
 80024ae:	e277      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d135      	bne.n	8002532 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	3358      	adds	r3, #88	; 0x58
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	0151      	lsls	r1, r2, #5
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	440a      	add	r2, r1
 80024f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f002 fdda 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	461a      	mov	r2, r3
 8002518:	2301      	movs	r3, #1
 800251a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	335d      	adds	r3, #93	; 0x5d
 800252c:	2201      	movs	r2, #1
 800252e:	701a      	strb	r2, [r3, #0]
}
 8002530:	e236      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b08      	cmp	r3, #8
 8002546:	d12b      	bne.n	80025a0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002554:	461a      	mov	r2, r3
 8002556:	2308      	movs	r3, #8
 8002558:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	0151      	lsls	r1, r2, #5
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	440a      	add	r2, r1
 8002570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f002 fd9a 	bl	80050be <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	440b      	add	r3, r1
 8002598:	335d      	adds	r3, #93	; 0x5d
 800259a:	2205      	movs	r2, #5
 800259c:	701a      	strb	r2, [r3, #0]
}
 800259e:	e1ff      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b10      	cmp	r3, #16
 80025b4:	d155      	bne.n	8002662 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	3358      	adds	r3, #88	; 0x58
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	335d      	adds	r3, #93	; 0x5d
 80025da:	2203      	movs	r2, #3
 80025dc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	333d      	adds	r3, #61	; 0x3d
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d114      	bne.n	800261e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	440b      	add	r3, r1
 8002602:	333c      	adds	r3, #60	; 0x3c
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	440b      	add	r3, r1
 8002618:	333d      	adds	r3, #61	; 0x3d
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	0151      	lsls	r1, r2, #5
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	440a      	add	r2, r1
 8002634:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f002 fd38 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	461a      	mov	r2, r3
 800265c:	2310      	movs	r3, #16
 800265e:	6093      	str	r3, [r2, #8]
}
 8002660:	e19e      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d12b      	bne.n	80026d0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	0151      	lsls	r1, r2, #5
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	440a      	add	r2, r1
 800268e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002692:	f043 0302 	orr.w	r3, r3, #2
 8002696:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f002 fd0b 	bl	80050be <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	335d      	adds	r3, #93	; 0x5d
 80026b8:	2206      	movs	r2, #6
 80026ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	461a      	mov	r2, r3
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	6093      	str	r3, [r2, #8]
}
 80026ce:	e167      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e6:	d135      	bne.n	8002754 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	0151      	lsls	r1, r2, #5
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	440a      	add	r2, r1
 80026fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f002 fcd3 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	461a      	mov	r2, r3
 8002726:	2310      	movs	r3, #16
 8002728:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002736:	461a      	mov	r2, r3
 8002738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800273c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	440b      	add	r3, r1
 800274c:	335d      	adds	r3, #93	; 0x5d
 800274e:	2208      	movs	r2, #8
 8002750:	701a      	strb	r2, [r3, #0]
}
 8002752:	e125      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b02      	cmp	r3, #2
 8002768:	f040 811a 	bne.w	80029a0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	0151      	lsls	r1, r2, #5
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	440a      	add	r2, r1
 8002782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002786:	f023 0302 	bic.w	r3, r3, #2
 800278a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	440b      	add	r3, r1
 800279a:	335d      	adds	r3, #93	; 0x5d
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d137      	bne.n	8002812 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	335c      	adds	r3, #92	; 0x5c
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	333f      	adds	r3, #63	; 0x3f
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d00b      	beq.n	80027e4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	333f      	adds	r3, #63	; 0x3f
 80027dc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027de:	2b03      	cmp	r3, #3
 80027e0:	f040 80c5 	bne.w	800296e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	3351      	adds	r3, #81	; 0x51
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	f083 0301 	eor.w	r3, r3, #1
 80027fa:	b2d8      	uxtb	r0, r3
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	440b      	add	r3, r1
 800280a:	3351      	adds	r3, #81	; 0x51
 800280c:	4602      	mov	r2, r0
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	e0ad      	b.n	800296e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	335d      	adds	r3, #93	; 0x5d
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d10a      	bne.n	800283e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	335c      	adds	r3, #92	; 0x5c
 8002838:	2202      	movs	r2, #2
 800283a:	701a      	strb	r2, [r3, #0]
 800283c:	e097      	b.n	800296e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	335d      	adds	r3, #93	; 0x5d
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b04      	cmp	r3, #4
 8002852:	d10a      	bne.n	800286a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	335c      	adds	r3, #92	; 0x5c
 8002864:	2202      	movs	r2, #2
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e081      	b.n	800296e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	335d      	adds	r3, #93	; 0x5d
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d10a      	bne.n	8002896 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	335c      	adds	r3, #92	; 0x5c
 8002890:	2205      	movs	r2, #5
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	e06b      	b.n	800296e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	335d      	adds	r3, #93	; 0x5d
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b06      	cmp	r3, #6
 80028aa:	d00a      	beq.n	80028c2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	335d      	adds	r3, #93	; 0x5d
 80028bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d155      	bne.n	800296e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	3358      	adds	r3, #88	; 0x58
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	1c59      	adds	r1, r3, #1
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4403      	add	r3, r0
 80028e4:	3358      	adds	r3, #88	; 0x58
 80028e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	3358      	adds	r3, #88	; 0x58
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d914      	bls.n	8002928 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	3358      	adds	r3, #88	; 0x58
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	335c      	adds	r3, #92	; 0x5c
 8002922:	2204      	movs	r2, #4
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e009      	b.n	800293c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	440b      	add	r3, r1
 8002936:	335c      	adds	r3, #92	; 0x5c
 8002938:	2202      	movs	r2, #2
 800293a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002952:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800295a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	461a      	mov	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	461a      	mov	r2, r3
 800297c:	2302      	movs	r3, #2
 800297e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	b2d8      	uxtb	r0, r3
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	4601      	mov	r1, r0
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f004 fd32 	bl	8007404 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029a0:	bf00      	nop
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	0c5b      	lsrs	r3, r3, #17
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029dc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d003      	beq.n	80029ec <HCD_RXQLVL_IRQHandler+0x44>
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	f000 8082 	beq.w	8002aee <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80029ea:	e083      	b.n	8002af4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d07f      	beq.n	8002af2 <HCD_RXQLVL_IRQHandler+0x14a>
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	3344      	adds	r3, #68	; 0x44
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d074      	beq.n	8002af2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	3344      	adds	r3, #68	; 0x44
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	b292      	uxth	r2, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f001 feeb 	bl	80047fe <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	3344      	adds	r3, #68	; 0x44
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	18d1      	adds	r1, r2, r3
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4403      	add	r3, r0
 8002a4c:	3344      	adds	r3, #68	; 0x44
 8002a4e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	334c      	adds	r3, #76	; 0x4c
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	18d1      	adds	r1, r2, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4403      	add	r3, r0
 8002a74:	334c      	adds	r3, #76	; 0x4c
 8002a76:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HCD_RXQLVL_IRQHandler+0x154>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d031      	beq.n	8002af2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aa4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aac:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	3350      	adds	r3, #80	; 0x50
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	f083 0301 	eor.w	r3, r3, #1
 8002ad6:	b2d8      	uxtb	r0, r3
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3350      	adds	r3, #80	; 0x50
 8002ae8:	4602      	mov	r2, r0
 8002aea:	701a      	strb	r2, [r3, #0]
      break;
 8002aec:	e001      	b.n	8002af2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002aee:	bf00      	nop
 8002af0:	e000      	b.n	8002af4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002af2:	bf00      	nop
  }
}
 8002af4:	bf00      	nop
 8002af6:	3728      	adds	r7, #40	; 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	1ff80000 	.word	0x1ff80000

08002b00 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b2c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d10b      	bne.n	8002b50 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d102      	bne.n	8002b48 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f004 fc42 	bl	80073cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f043 0302 	orr.w	r3, r3, #2
 8002b4e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d132      	bne.n	8002bc0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f043 0308 	orr.w	r3, r3, #8
 8002b60:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d126      	bne.n	8002bba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d113      	bne.n	8002b9c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002b7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b7e:	d106      	bne.n	8002b8e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2102      	movs	r1, #2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 ff74 	bl	8004a74 <USB_InitFSLSPClkSel>
 8002b8c:	e011      	b.n	8002bb2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2101      	movs	r1, #1
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 ff6d 	bl	8004a74 <USB_InitFSLSPClkSel>
 8002b9a:	e00a      	b.n	8002bb2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d106      	bne.n	8002bb2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002baa:	461a      	mov	r2, r3
 8002bac:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bb0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f004 fc34 	bl	8007420 <HAL_HCD_PortEnabled_Callback>
 8002bb8:	e002      	b.n	8002bc0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f004 fc3e 	bl	800743c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d103      	bne.n	8002bd2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f043 0320 	orr.w	r3, r3, #32
 8002bd0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bd8:	461a      	mov	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6013      	str	r3, [r2, #0]
}
 8002bde:	bf00      	nop
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e11f      	b.n	8002e3a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd fe88 	bl	8000924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2224      	movs	r2, #36	; 0x24
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c4c:	f001 fbb6 	bl	80043bc <HAL_RCC_GetPCLK1Freq>
 8002c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4a7b      	ldr	r2, [pc, #492]	; (8002e44 <HAL_I2C_Init+0x25c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d807      	bhi.n	8002c6c <HAL_I2C_Init+0x84>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a7a      	ldr	r2, [pc, #488]	; (8002e48 <HAL_I2C_Init+0x260>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	bf94      	ite	ls
 8002c64:	2301      	movls	r3, #1
 8002c66:	2300      	movhi	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e006      	b.n	8002c7a <HAL_I2C_Init+0x92>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a77      	ldr	r2, [pc, #476]	; (8002e4c <HAL_I2C_Init+0x264>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bf94      	ite	ls
 8002c74:	2301      	movls	r3, #1
 8002c76:	2300      	movhi	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0db      	b.n	8002e3a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a72      	ldr	r2, [pc, #456]	; (8002e50 <HAL_I2C_Init+0x268>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0c9b      	lsrs	r3, r3, #18
 8002c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a64      	ldr	r2, [pc, #400]	; (8002e44 <HAL_I2C_Init+0x25c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d802      	bhi.n	8002cbc <HAL_I2C_Init+0xd4>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	e009      	b.n	8002cd0 <HAL_I2C_Init+0xe8>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	4a63      	ldr	r2, [pc, #396]	; (8002e54 <HAL_I2C_Init+0x26c>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	099b      	lsrs	r3, r3, #6
 8002cce:	3301      	adds	r3, #1
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ce2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4956      	ldr	r1, [pc, #344]	; (8002e44 <HAL_I2C_Init+0x25c>)
 8002cec:	428b      	cmp	r3, r1
 8002cee:	d80d      	bhi.n	8002d0c <HAL_I2C_Init+0x124>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e59      	subs	r1, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	bf38      	it	cc
 8002d08:	2304      	movcc	r3, #4
 8002d0a:	e04f      	b.n	8002dac <HAL_I2C_Init+0x1c4>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d111      	bne.n	8002d38 <HAL_I2C_Init+0x150>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1e58      	subs	r0, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	440b      	add	r3, r1
 8002d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e012      	b.n	8002d5e <HAL_I2C_Init+0x176>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e58      	subs	r0, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	0099      	lsls	r1, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Init+0x17e>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e022      	b.n	8002dac <HAL_I2C_Init+0x1c4>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10e      	bne.n	8002d8c <HAL_I2C_Init+0x1a4>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1e58      	subs	r0, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	440b      	add	r3, r1
 8002d7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8a:	e00f      	b.n	8002dac <HAL_I2C_Init+0x1c4>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1e58      	subs	r0, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	0099      	lsls	r1, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	6809      	ldr	r1, [r1, #0]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6911      	ldr	r1, [r2, #16]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68d2      	ldr	r2, [r2, #12]
 8002de6:	4311      	orrs	r1, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	000186a0 	.word	0x000186a0
 8002e48:	001e847f 	.word	0x001e847f
 8002e4c:	003d08ff 	.word	0x003d08ff
 8002e50:	431bde83 	.word	0x431bde83
 8002e54:	10624dd3 	.word	0x10624dd3

08002e58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	4608      	mov	r0, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	461a      	mov	r2, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	817b      	strh	r3, [r7, #10]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	813b      	strh	r3, [r7, #8]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e72:	f7fd feb9 	bl	8000be8 <HAL_GetTick>
 8002e76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	f040 80d9 	bne.w	8003038 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	2319      	movs	r3, #25
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	496d      	ldr	r1, [pc, #436]	; (8003044 <HAL_I2C_Mem_Write+0x1ec>)
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fc7b 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e0cc      	b.n	800303a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_I2C_Mem_Write+0x56>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e0c5      	b.n	800303a <HAL_I2C_Mem_Write+0x1e2>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d007      	beq.n	8002ed4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2221      	movs	r2, #33	; 0x21
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2240      	movs	r2, #64	; 0x40
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4a4d      	ldr	r2, [pc, #308]	; (8003048 <HAL_I2C_Mem_Write+0x1f0>)
 8002f14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f16:	88f8      	ldrh	r0, [r7, #6]
 8002f18:	893a      	ldrh	r2, [r7, #8]
 8002f1a:	8979      	ldrh	r1, [r7, #10]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	4603      	mov	r3, r0
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fab6 	bl	8003498 <I2C_RequestMemoryWrite>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d052      	beq.n	8002fd8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e081      	b.n	800303a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fcfc 	bl	8003938 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00d      	beq.n	8002f62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d107      	bne.n	8002f5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e06b      	b.n	800303a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_I2C_Mem_Write+0x180>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d017      	beq.n	8002fd8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	781a      	ldrb	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1aa      	bne.n	8002f36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 fce8 	bl	80039ba <I2C_WaitOnBTFFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00d      	beq.n	800300c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d107      	bne.n	8003008 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003006:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e016      	b.n	800303a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	e000      	b.n	800303a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003038:	2302      	movs	r3, #2
  }
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	00100002 	.word	0x00100002
 8003048:	ffff0000 	.word	0xffff0000

0800304c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	; 0x30
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	4608      	mov	r0, r1
 8003056:	4611      	mov	r1, r2
 8003058:	461a      	mov	r2, r3
 800305a:	4603      	mov	r3, r0
 800305c:	817b      	strh	r3, [r7, #10]
 800305e:	460b      	mov	r3, r1
 8003060:	813b      	strh	r3, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003066:	f7fd fdbf 	bl	8000be8 <HAL_GetTick>
 800306a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b20      	cmp	r3, #32
 8003076:	f040 8208 	bne.w	800348a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	2319      	movs	r3, #25
 8003080:	2201      	movs	r2, #1
 8003082:	497b      	ldr	r1, [pc, #492]	; (8003270 <HAL_I2C_Mem_Read+0x224>)
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fb81 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
 8003092:	e1fb      	b.n	800348c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_I2C_Mem_Read+0x56>
 800309e:	2302      	movs	r3, #2
 80030a0:	e1f4      	b.n	800348c <HAL_I2C_Mem_Read+0x440>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d007      	beq.n	80030c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2222      	movs	r2, #34	; 0x22
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2240      	movs	r2, #64	; 0x40
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a5b      	ldr	r2, [pc, #364]	; (8003274 <HAL_I2C_Mem_Read+0x228>)
 8003108:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800310a:	88f8      	ldrh	r0, [r7, #6]
 800310c:	893a      	ldrh	r2, [r7, #8]
 800310e:	8979      	ldrh	r1, [r7, #10]
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	4603      	mov	r3, r0
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fa50 	bl	80035c0 <I2C_RequestMemoryRead>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e1b0      	b.n	800348c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	2b00      	cmp	r3, #0
 8003130:	d113      	bne.n	800315a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003132:	2300      	movs	r3, #0
 8003134:	623b      	str	r3, [r7, #32]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	623b      	str	r3, [r7, #32]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	623b      	str	r3, [r7, #32]
 8003146:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e184      	b.n	8003464 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315e:	2b01      	cmp	r3, #1
 8003160:	d11b      	bne.n	800319a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003170:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e164      	b.n	8003464 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d11b      	bne.n	80031da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	e144      	b.n	8003464 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031f0:	e138      	b.n	8003464 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	f200 80f1 	bhi.w	80033de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	2b01      	cmp	r3, #1
 8003202:	d123      	bne.n	800324c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fc17 	bl	8003a3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e139      	b.n	800348c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691a      	ldr	r2, [r3, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	855a      	strh	r2, [r3, #42]	; 0x2a
 800324a:	e10b      	b.n	8003464 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	2b02      	cmp	r3, #2
 8003252:	d14e      	bne.n	80032f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	2200      	movs	r2, #0
 800325c:	4906      	ldr	r1, [pc, #24]	; (8003278 <HAL_I2C_Mem_Read+0x22c>)
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 fa94 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e10e      	b.n	800348c <HAL_I2C_Mem_Read+0x440>
 800326e:	bf00      	nop
 8003270:	00100002 	.word	0x00100002
 8003274:	ffff0000 	.word	0xffff0000
 8003278:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032f0:	e0b8      	b.n	8003464 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	2200      	movs	r2, #0
 80032fa:	4966      	ldr	r1, [pc, #408]	; (8003494 <HAL_I2C_Mem_Read+0x448>)
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fa45 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0bf      	b.n	800348c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003354:	2200      	movs	r2, #0
 8003356:	494f      	ldr	r1, [pc, #316]	; (8003494 <HAL_I2C_Mem_Read+0x448>)
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 fa17 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e091      	b.n	800348c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003376:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033dc:	e042      	b.n	8003464 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 fb2a 	bl	8003a3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e04c      	b.n	800348c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b04      	cmp	r3, #4
 8003430:	d118      	bne.n	8003464 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	f47f aec2 	bne.w	80031f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800348a:	2302      	movs	r3, #2
  }
}
 800348c:	4618      	mov	r0, r3
 800348e:	3728      	adds	r7, #40	; 0x28
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	00010004 	.word	0x00010004

08003498 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	4608      	mov	r0, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	461a      	mov	r2, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	817b      	strh	r3, [r7, #10]
 80034aa:	460b      	mov	r3, r1
 80034ac:	813b      	strh	r3, [r7, #8]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f95c 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e05f      	b.n	80035b4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034f4:	897b      	ldrh	r3, [r7, #10]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003502:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	6a3a      	ldr	r2, [r7, #32]
 8003508:	492c      	ldr	r1, [pc, #176]	; (80035bc <I2C_RequestMemoryWrite+0x124>)
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f995 	bl	800383a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e04c      	b.n	80035b4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	6a39      	ldr	r1, [r7, #32]
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f9ff 	bl	8003938 <I2C_WaitOnTXEFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00d      	beq.n	800355c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	2b04      	cmp	r3, #4
 8003546:	d107      	bne.n	8003558 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003556:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e02b      	b.n	80035b4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d105      	bne.n	800356e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003562:	893b      	ldrh	r3, [r7, #8]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	611a      	str	r2, [r3, #16]
 800356c:	e021      	b.n	80035b2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800356e:	893b      	ldrh	r3, [r7, #8]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	b29b      	uxth	r3, r3
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800357c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357e:	6a39      	ldr	r1, [r7, #32]
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f9d9 	bl	8003938 <I2C_WaitOnTXEFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00d      	beq.n	80035a8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	2b04      	cmp	r3, #4
 8003592:	d107      	bne.n	80035a4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e005      	b.n	80035b4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035a8:	893b      	ldrh	r3, [r7, #8]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	00010002 	.word	0x00010002

080035c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	4608      	mov	r0, r1
 80035ca:	4611      	mov	r1, r2
 80035cc:	461a      	mov	r2, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	817b      	strh	r3, [r7, #10]
 80035d2:	460b      	mov	r3, r1
 80035d4:	813b      	strh	r3, [r7, #8]
 80035d6:	4613      	mov	r3, r2
 80035d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	2200      	movs	r2, #0
 8003602:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f8c0 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00c      	beq.n	800362c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e0a9      	b.n	8003780 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800362c:	897b      	ldrh	r3, [r7, #10]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800363a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	6a3a      	ldr	r2, [r7, #32]
 8003640:	4951      	ldr	r1, [pc, #324]	; (8003788 <I2C_RequestMemoryRead+0x1c8>)
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f8f9 	bl	800383a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e096      	b.n	8003780 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	6a39      	ldr	r1, [r7, #32]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f963 	bl	8003938 <I2C_WaitOnTXEFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00d      	beq.n	8003694 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	2b04      	cmp	r3, #4
 800367e:	d107      	bne.n	8003690 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e075      	b.n	8003780 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800369a:	893b      	ldrh	r3, [r7, #8]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	611a      	str	r2, [r3, #16]
 80036a4:	e021      	b.n	80036ea <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036a6:	893b      	ldrh	r3, [r7, #8]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b6:	6a39      	ldr	r1, [r7, #32]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f93d 	bl	8003938 <I2C_WaitOnTXEFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00d      	beq.n	80036e0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d107      	bne.n	80036dc <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e04f      	b.n	8003780 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036e0:	893b      	ldrh	r3, [r7, #8]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ec:	6a39      	ldr	r1, [r7, #32]
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f922 	bl	8003938 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d107      	bne.n	8003712 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003710:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e034      	b.n	8003780 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003724:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	2200      	movs	r2, #0
 800372e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f82a 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00c      	beq.n	8003758 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003752:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e013      	b.n	8003780 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003758:	897b      	ldrh	r3, [r7, #10]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	b2da      	uxtb	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	6a3a      	ldr	r2, [r7, #32]
 800376c:	4906      	ldr	r1, [pc, #24]	; (8003788 <I2C_RequestMemoryRead+0x1c8>)
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f863 	bl	800383a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	00010002 	.word	0x00010002

0800378c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800379c:	e025      	b.n	80037ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a4:	d021      	beq.n	80037ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a6:	f7fd fa1f 	bl	8000be8 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d116      	bne.n	80037ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e023      	b.n	8003832 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	0c1b      	lsrs	r3, r3, #16
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d10d      	bne.n	8003810 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	43da      	mvns	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4013      	ands	r3, r2
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	bf0c      	ite	eq
 8003806:	2301      	moveq	r3, #1
 8003808:	2300      	movne	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	e00c      	b.n	800382a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	43da      	mvns	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4013      	ands	r3, r2
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	bf0c      	ite	eq
 8003822:	2301      	moveq	r3, #1
 8003824:	2300      	movne	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	429a      	cmp	r2, r3
 800382e:	d0b6      	beq.n	800379e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b084      	sub	sp, #16
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003848:	e051      	b.n	80038ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003858:	d123      	bne.n	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003868:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003872:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f043 0204 	orr.w	r2, r3, #4
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e046      	b.n	8003930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a8:	d021      	beq.n	80038ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038aa:	f7fd f99d 	bl	8000be8 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d116      	bne.n	80038ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e020      	b.n	8003930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d10c      	bne.n	8003912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4013      	ands	r3, r2
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf14      	ite	ne
 800390a:	2301      	movne	r3, #1
 800390c:	2300      	moveq	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	e00b      	b.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	43da      	mvns	r2, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4013      	ands	r3, r2
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf14      	ite	ne
 8003924:	2301      	movne	r3, #1
 8003926:	2300      	moveq	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d18d      	bne.n	800384a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003944:	e02d      	b.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f8ce 	bl	8003ae8 <I2C_IsAcknowledgeFailed>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e02d      	b.n	80039b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800395c:	d021      	beq.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395e:	f7fd f943 	bl	8000be8 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d116      	bne.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f043 0220 	orr.w	r2, r3, #32
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e007      	b.n	80039b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ac:	2b80      	cmp	r3, #128	; 0x80
 80039ae:	d1ca      	bne.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039c6:	e02d      	b.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f88d 	bl	8003ae8 <I2C_IsAcknowledgeFailed>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e02d      	b.n	8003a34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039de:	d021      	beq.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e0:	f7fd f902 	bl	8000be8 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d302      	bcc.n	80039f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d116      	bne.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e007      	b.n	8003a34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d1ca      	bne.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a48:	e042      	b.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d119      	bne.n	8003a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0210 	mvn.w	r2, #16
 8003a60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e029      	b.n	8003ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8c:	f7fd f8ac 	bl	8000be8 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d302      	bcc.n	8003aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d116      	bne.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	f043 0220 	orr.w	r2, r3, #32
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e007      	b.n	8003ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d1b5      	bne.n	8003a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afe:	d11b      	bne.n	8003b38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f043 0204 	orr.w	r2, r3, #4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e25b      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d075      	beq.n	8003c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b66:	4ba3      	ldr	r3, [pc, #652]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d00c      	beq.n	8003b8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b72:	4ba0      	ldr	r3, [pc, #640]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d112      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b7e:	4b9d      	ldr	r3, [pc, #628]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b8a:	d10b      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8c:	4b99      	ldr	r3, [pc, #612]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d05b      	beq.n	8003c50 <HAL_RCC_OscConfig+0x108>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d157      	bne.n	8003c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e236      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bac:	d106      	bne.n	8003bbc <HAL_RCC_OscConfig+0x74>
 8003bae:	4b91      	ldr	r3, [pc, #580]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a90      	ldr	r2, [pc, #576]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e01d      	b.n	8003bf8 <HAL_RCC_OscConfig+0xb0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bc4:	d10c      	bne.n	8003be0 <HAL_RCC_OscConfig+0x98>
 8003bc6:	4b8b      	ldr	r3, [pc, #556]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a8a      	ldr	r2, [pc, #552]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	4b88      	ldr	r3, [pc, #544]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a87      	ldr	r2, [pc, #540]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e00b      	b.n	8003bf8 <HAL_RCC_OscConfig+0xb0>
 8003be0:	4b84      	ldr	r3, [pc, #528]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a83      	ldr	r2, [pc, #524]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	4b81      	ldr	r3, [pc, #516]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a80      	ldr	r2, [pc, #512]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d013      	beq.n	8003c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fc fff2 	bl	8000be8 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c08:	f7fc ffee 	bl	8000be8 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e1fb      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	4b76      	ldr	r3, [pc, #472]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0xc0>
 8003c26:	e014      	b.n	8003c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fc ffde 	bl	8000be8 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c30:	f7fc ffda 	bl	8000be8 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	; 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e1e7      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c42:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0xe8>
 8003c4e:	e000      	b.n	8003c52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d063      	beq.n	8003d26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c5e:	4b65      	ldr	r3, [pc, #404]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6a:	4b62      	ldr	r3, [pc, #392]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d11c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c76:	4b5f      	ldr	r3, [pc, #380]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d116      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c82:	4b5c      	ldr	r3, [pc, #368]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_RCC_OscConfig+0x152>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e1bb      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9a:	4b56      	ldr	r3, [pc, #344]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4952      	ldr	r1, [pc, #328]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cae:	e03a      	b.n	8003d26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb8:	4b4f      	ldr	r3, [pc, #316]	; (8003df8 <HAL_RCC_OscConfig+0x2b0>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbe:	f7fc ff93 	bl	8000be8 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc6:	f7fc ff8f 	bl	8000be8 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e19c      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd8:	4b46      	ldr	r3, [pc, #280]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce4:	4b43      	ldr	r3, [pc, #268]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4940      	ldr	r1, [pc, #256]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	600b      	str	r3, [r1, #0]
 8003cf8:	e015      	b.n	8003d26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfa:	4b3f      	ldr	r3, [pc, #252]	; (8003df8 <HAL_RCC_OscConfig+0x2b0>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fc ff72 	bl	8000be8 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d08:	f7fc ff6e 	bl	8000be8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e17b      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1a:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d030      	beq.n	8003d94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d016      	beq.n	8003d68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d3a:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <HAL_RCC_OscConfig+0x2b4>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d40:	f7fc ff52 	bl	8000be8 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d48:	f7fc ff4e 	bl	8000be8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e15b      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5a:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0x200>
 8003d66:	e015      	b.n	8003d94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d68:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <HAL_RCC_OscConfig+0x2b4>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6e:	f7fc ff3b 	bl	8000be8 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d76:	f7fc ff37 	bl	8000be8 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e144      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d88:	4b1a      	ldr	r3, [pc, #104]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f0      	bne.n	8003d76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80a0 	beq.w	8003ee2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10f      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_RCC_OscConfig+0x2b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d121      	bne.n	8003e22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <HAL_RCC_OscConfig+0x2b8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <HAL_RCC_OscConfig+0x2b8>)
 8003de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dea:	f7fc fefd 	bl	8000be8 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	e011      	b.n	8003e16 <HAL_RCC_OscConfig+0x2ce>
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800
 8003df8:	42470000 	.word	0x42470000
 8003dfc:	42470e80 	.word	0x42470e80
 8003e00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e04:	f7fc fef0 	bl	8000be8 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e0fd      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e16:	4b81      	ldr	r3, [pc, #516]	; (800401c <HAL_RCC_OscConfig+0x4d4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d106      	bne.n	8003e38 <HAL_RCC_OscConfig+0x2f0>
 8003e2a:	4b7d      	ldr	r3, [pc, #500]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a7c      	ldr	r2, [pc, #496]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
 8003e36:	e01c      	b.n	8003e72 <HAL_RCC_OscConfig+0x32a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d10c      	bne.n	8003e5a <HAL_RCC_OscConfig+0x312>
 8003e40:	4b77      	ldr	r3, [pc, #476]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	4a76      	ldr	r2, [pc, #472]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003e46:	f043 0304 	orr.w	r3, r3, #4
 8003e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4c:	4b74      	ldr	r3, [pc, #464]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	4a73      	ldr	r2, [pc, #460]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6713      	str	r3, [r2, #112]	; 0x70
 8003e58:	e00b      	b.n	8003e72 <HAL_RCC_OscConfig+0x32a>
 8003e5a:	4b71      	ldr	r3, [pc, #452]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a70      	ldr	r2, [pc, #448]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
 8003e66:	4b6e      	ldr	r3, [pc, #440]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a6d      	ldr	r2, [pc, #436]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003e6c:	f023 0304 	bic.w	r3, r3, #4
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d015      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7a:	f7fc feb5 	bl	8000be8 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fc feb1 	bl	8000be8 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0bc      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	4b61      	ldr	r3, [pc, #388]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0ee      	beq.n	8003e82 <HAL_RCC_OscConfig+0x33a>
 8003ea4:	e014      	b.n	8003ed0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea6:	f7fc fe9f 	bl	8000be8 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fc fe9b 	bl	8000be8 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e0a6      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec4:	4b56      	ldr	r3, [pc, #344]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1ee      	bne.n	8003eae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed6:	4b52      	ldr	r3, [pc, #328]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	4a51      	ldr	r2, [pc, #324]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 8092 	beq.w	8004010 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eec:	4b4c      	ldr	r3, [pc, #304]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d05c      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d141      	bne.n	8003f84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f00:	4b48      	ldr	r3, [pc, #288]	; (8004024 <HAL_RCC_OscConfig+0x4dc>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fc fe6f 	bl	8000be8 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fc fe6b 	bl	8000be8 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e078      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f20:	4b3f      	ldr	r3, [pc, #252]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f0      	bne.n	8003f0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	019b      	lsls	r3, r3, #6
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	085b      	lsrs	r3, r3, #1
 8003f44:	3b01      	subs	r3, #1
 8003f46:	041b      	lsls	r3, r3, #16
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	061b      	lsls	r3, r3, #24
 8003f50:	4933      	ldr	r1, [pc, #204]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f56:	4b33      	ldr	r3, [pc, #204]	; (8004024 <HAL_RCC_OscConfig+0x4dc>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5c:	f7fc fe44 	bl	8000be8 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fc fe40 	bl	8000be8 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e04d      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f76:	4b2a      	ldr	r3, [pc, #168]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x41c>
 8003f82:	e045      	b.n	8004010 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f84:	4b27      	ldr	r3, [pc, #156]	; (8004024 <HAL_RCC_OscConfig+0x4dc>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fc fe2d 	bl	8000be8 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fc fe29 	bl	8000be8 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e036      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa4:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x44a>
 8003fb0:	e02e      	b.n	8004010 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e029      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fbe:	4b18      	ldr	r3, [pc, #96]	; (8004020 <HAL_RCC_OscConfig+0x4d8>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d11c      	bne.n	800400c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d115      	bne.n	800400c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d10d      	bne.n	800400c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d106      	bne.n	800400c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40007000 	.word	0x40007000
 8004020:	40023800 	.word	0x40023800
 8004024:	42470060 	.word	0x42470060

08004028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0cc      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800403c:	4b68      	ldr	r3, [pc, #416]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d90c      	bls.n	8004064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b63      	ldr	r3, [pc, #396]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0b8      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d020      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800407c:	4b59      	ldr	r3, [pc, #356]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a58      	ldr	r2, [pc, #352]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004094:	4b53      	ldr	r3, [pc, #332]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4a52      	ldr	r2, [pc, #328]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800409e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a0:	4b50      	ldr	r3, [pc, #320]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	494d      	ldr	r1, [pc, #308]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d044      	beq.n	8004148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c6:	4b47      	ldr	r3, [pc, #284]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d119      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e07f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d003      	beq.n	80040e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e6:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e06f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f6:	4b3b      	ldr	r3, [pc, #236]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e067      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004106:	4b37      	ldr	r3, [pc, #220]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f023 0203 	bic.w	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4934      	ldr	r1, [pc, #208]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004118:	f7fc fd66 	bl	8000be8 <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	e00a      	b.n	8004136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004120:	f7fc fd62 	bl	8000be8 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	; 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e04f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004136:	4b2b      	ldr	r3, [pc, #172]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 020c 	and.w	r2, r3, #12
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	429a      	cmp	r2, r3
 8004146:	d1eb      	bne.n	8004120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004148:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d20c      	bcs.n	8004170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e032      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800417c:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4916      	ldr	r1, [pc, #88]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419a:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	490e      	ldr	r1, [pc, #56]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ae:	f000 f821 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 80041b2:	4601      	mov	r1, r0
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 80041c0:	5cd3      	ldrb	r3, [r2, r3]
 80041c2:	fa21 f303 	lsr.w	r3, r1, r3
 80041c6:	4a09      	ldr	r2, [pc, #36]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc fcc6 	bl	8000b60 <HAL_InitTick>

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40023c00 	.word	0x40023c00
 80041e4:	40023800 	.word	0x40023800
 80041e8:	08007a54 	.word	0x08007a54
 80041ec:	20000000 	.word	0x20000000
 80041f0:	20000004 	.word	0x20000004

080041f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	2300      	movs	r3, #0
 8004204:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800420a:	4b63      	ldr	r3, [pc, #396]	; (8004398 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b04      	cmp	r3, #4
 8004214:	d007      	beq.n	8004226 <HAL_RCC_GetSysClockFreq+0x32>
 8004216:	2b08      	cmp	r3, #8
 8004218:	d008      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x38>
 800421a:	2b00      	cmp	r3, #0
 800421c:	f040 80b4 	bne.w	8004388 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004220:	4b5e      	ldr	r3, [pc, #376]	; (800439c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004222:	60bb      	str	r3, [r7, #8]
       break;
 8004224:	e0b3      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004226:	4b5e      	ldr	r3, [pc, #376]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004228:	60bb      	str	r3, [r7, #8]
      break;
 800422a:	e0b0      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800422c:	4b5a      	ldr	r3, [pc, #360]	; (8004398 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004234:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004236:	4b58      	ldr	r3, [pc, #352]	; (8004398 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d04a      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004242:	4b55      	ldr	r3, [pc, #340]	; (8004398 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	099b      	lsrs	r3, r3, #6
 8004248:	f04f 0400 	mov.w	r4, #0
 800424c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	ea03 0501 	and.w	r5, r3, r1
 8004258:	ea04 0602 	and.w	r6, r4, r2
 800425c:	4629      	mov	r1, r5
 800425e:	4632      	mov	r2, r6
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	f04f 0400 	mov.w	r4, #0
 8004268:	0154      	lsls	r4, r2, #5
 800426a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800426e:	014b      	lsls	r3, r1, #5
 8004270:	4619      	mov	r1, r3
 8004272:	4622      	mov	r2, r4
 8004274:	1b49      	subs	r1, r1, r5
 8004276:	eb62 0206 	sbc.w	r2, r2, r6
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	f04f 0400 	mov.w	r4, #0
 8004282:	0194      	lsls	r4, r2, #6
 8004284:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004288:	018b      	lsls	r3, r1, #6
 800428a:	1a5b      	subs	r3, r3, r1
 800428c:	eb64 0402 	sbc.w	r4, r4, r2
 8004290:	f04f 0100 	mov.w	r1, #0
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	00e2      	lsls	r2, r4, #3
 800429a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800429e:	00d9      	lsls	r1, r3, #3
 80042a0:	460b      	mov	r3, r1
 80042a2:	4614      	mov	r4, r2
 80042a4:	195b      	adds	r3, r3, r5
 80042a6:	eb44 0406 	adc.w	r4, r4, r6
 80042aa:	f04f 0100 	mov.w	r1, #0
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	0262      	lsls	r2, r4, #9
 80042b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042b8:	0259      	lsls	r1, r3, #9
 80042ba:	460b      	mov	r3, r1
 80042bc:	4614      	mov	r4, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	4621      	mov	r1, r4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f04f 0400 	mov.w	r4, #0
 80042c8:	461a      	mov	r2, r3
 80042ca:	4623      	mov	r3, r4
 80042cc:	f7fb ff7c 	bl	80001c8 <__aeabi_uldivmod>
 80042d0:	4603      	mov	r3, r0
 80042d2:	460c      	mov	r4, r1
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e049      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d8:	4b2f      	ldr	r3, [pc, #188]	; (8004398 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	099b      	lsrs	r3, r3, #6
 80042de:	f04f 0400 	mov.w	r4, #0
 80042e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	ea03 0501 	and.w	r5, r3, r1
 80042ee:	ea04 0602 	and.w	r6, r4, r2
 80042f2:	4629      	mov	r1, r5
 80042f4:	4632      	mov	r2, r6
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	f04f 0400 	mov.w	r4, #0
 80042fe:	0154      	lsls	r4, r2, #5
 8004300:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004304:	014b      	lsls	r3, r1, #5
 8004306:	4619      	mov	r1, r3
 8004308:	4622      	mov	r2, r4
 800430a:	1b49      	subs	r1, r1, r5
 800430c:	eb62 0206 	sbc.w	r2, r2, r6
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	f04f 0400 	mov.w	r4, #0
 8004318:	0194      	lsls	r4, r2, #6
 800431a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800431e:	018b      	lsls	r3, r1, #6
 8004320:	1a5b      	subs	r3, r3, r1
 8004322:	eb64 0402 	sbc.w	r4, r4, r2
 8004326:	f04f 0100 	mov.w	r1, #0
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	00e2      	lsls	r2, r4, #3
 8004330:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004334:	00d9      	lsls	r1, r3, #3
 8004336:	460b      	mov	r3, r1
 8004338:	4614      	mov	r4, r2
 800433a:	195b      	adds	r3, r3, r5
 800433c:	eb44 0406 	adc.w	r4, r4, r6
 8004340:	f04f 0100 	mov.w	r1, #0
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	02a2      	lsls	r2, r4, #10
 800434a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800434e:	0299      	lsls	r1, r3, #10
 8004350:	460b      	mov	r3, r1
 8004352:	4614      	mov	r4, r2
 8004354:	4618      	mov	r0, r3
 8004356:	4621      	mov	r1, r4
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f04f 0400 	mov.w	r4, #0
 800435e:	461a      	mov	r2, r3
 8004360:	4623      	mov	r3, r4
 8004362:	f7fb ff31 	bl	80001c8 <__aeabi_uldivmod>
 8004366:	4603      	mov	r3, r0
 8004368:	460c      	mov	r4, r1
 800436a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800436c:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	0c1b      	lsrs	r3, r3, #16
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	3301      	adds	r3, #1
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	60bb      	str	r3, [r7, #8]
      break;
 8004386:	e002      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800438a:	60bb      	str	r3, [r7, #8]
      break;
 800438c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800438e:	68bb      	ldr	r3, [r7, #8]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004398:	40023800 	.word	0x40023800
 800439c:	00f42400 	.word	0x00f42400
 80043a0:	007a1200 	.word	0x007a1200

080043a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043aa:	681b      	ldr	r3, [r3, #0]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20000000 	.word	0x20000000

080043bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043c0:	f7ff fff0 	bl	80043a4 <HAL_RCC_GetHCLKFreq>
 80043c4:	4601      	mov	r1, r0
 80043c6:	4b05      	ldr	r3, [pc, #20]	; (80043dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	0a9b      	lsrs	r3, r3, #10
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	4a03      	ldr	r2, [pc, #12]	; (80043e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043d2:	5cd3      	ldrb	r3, [r2, r3]
 80043d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043d8:	4618      	mov	r0, r3
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40023800 	.word	0x40023800
 80043e0:	08007a64 	.word	0x08007a64

080043e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d105      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004408:	2b00      	cmp	r3, #0
 800440a:	d035      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800440c:	4b62      	ldr	r3, [pc, #392]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004412:	f7fc fbe9 	bl	8000be8 <HAL_GetTick>
 8004416:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004418:	e008      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800441a:	f7fc fbe5 	bl	8000be8 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e0b0      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800442c:	4b5b      	ldr	r3, [pc, #364]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f0      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	019a      	lsls	r2, r3, #6
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	071b      	lsls	r3, r3, #28
 8004444:	4955      	ldr	r1, [pc, #340]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800444c:	4b52      	ldr	r3, [pc, #328]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004452:	f7fc fbc9 	bl	8000be8 <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004458:	e008      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800445a:	f7fc fbc5 	bl	8000be8 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e090      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800446c:	4b4b      	ldr	r3, [pc, #300]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8083 	beq.w	800458c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	4b44      	ldr	r3, [pc, #272]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	4a43      	ldr	r2, [pc, #268]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004494:	6413      	str	r3, [r2, #64]	; 0x40
 8004496:	4b41      	ldr	r3, [pc, #260]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044a2:	4b3f      	ldr	r3, [pc, #252]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a3e      	ldr	r2, [pc, #248]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044ae:	f7fc fb9b 	bl	8000be8 <HAL_GetTick>
 80044b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044b6:	f7fc fb97 	bl	8000be8 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e062      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044c8:	4b35      	ldr	r3, [pc, #212]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044d4:	4b31      	ldr	r3, [pc, #196]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d02f      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d028      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044f2:	4b2a      	ldr	r3, [pc, #168]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044fc:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044fe:	2201      	movs	r2, #1
 8004500:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004502:	4b28      	ldr	r3, [pc, #160]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004508:	4a24      	ldr	r2, [pc, #144]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800450e:	4b23      	ldr	r3, [pc, #140]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d114      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800451a:	f7fc fb65 	bl	8000be8 <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004520:	e00a      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004522:	f7fc fb61 	bl	8000be8 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e02a      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004538:	4b18      	ldr	r3, [pc, #96]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ee      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004550:	d10d      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004552:	4b12      	ldr	r3, [pc, #72]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004566:	490d      	ldr	r1, [pc, #52]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004568:	4313      	orrs	r3, r2
 800456a:	608b      	str	r3, [r1, #8]
 800456c:	e005      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	4a0a      	ldr	r2, [pc, #40]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004574:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004578:	6093      	str	r3, [r2, #8]
 800457a:	4b08      	ldr	r3, [pc, #32]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800457c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004586:	4905      	ldr	r1, [pc, #20]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004588:	4313      	orrs	r3, r2
 800458a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	42470068 	.word	0x42470068
 800459c:	40023800 	.word	0x40023800
 80045a0:	40007000 	.word	0x40007000
 80045a4:	42470e40 	.word	0x42470e40

080045a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045a8:	b084      	sub	sp, #16
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	f107 001c 	add.w	r0, r7, #28
 80045b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d122      	bne.n	8004606 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d105      	bne.n	80045fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f94a 	bl	8004894 <USB_CoreReset>
 8004600:	4603      	mov	r3, r0
 8004602:	73fb      	strb	r3, [r7, #15]
 8004604:	e01a      	b.n	800463c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f93e 	bl	8004894 <USB_CoreReset>
 8004618:	4603      	mov	r3, r0
 800461a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800461c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
 800462e:	e005      	b.n	800463c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	2b01      	cmp	r3, #1
 8004640:	d10b      	bne.n	800465a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f043 0206 	orr.w	r2, r3, #6
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f043 0220 	orr.w	r2, r3, #32
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800465a:	7bfb      	ldrb	r3, [r7, #15]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004666:	b004      	add	sp, #16
 8004668:	4770      	bx	lr

0800466a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f023 0201 	bic.w	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	460b      	mov	r3, r1
 80046b8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]
 80046d8:	e00b      	b.n	80046f2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	60da      	str	r2, [r3, #12]
 80046ec:	e001      	b.n	80046f2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e003      	b.n	80046fa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80046f2:	2032      	movs	r0, #50	; 0x32
 80046f4:	f7fc fa84 	bl	8000c00 <HAL_Delay>

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	019b      	lsls	r3, r3, #6
 8004716:	f043 0220 	orr.w	r2, r3, #32
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3301      	adds	r3, #1
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <USB_FlushTxFifo+0x48>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d901      	bls.n	8004730 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e006      	b.n	800473e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b20      	cmp	r3, #32
 800473a:	d0f0      	beq.n	800471e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	00030d40 	.word	0x00030d40

08004750 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2210      	movs	r2, #16
 8004760:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3301      	adds	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a09      	ldr	r2, [pc, #36]	; (8004790 <USB_FlushRxFifo+0x40>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d901      	bls.n	8004774 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e006      	b.n	8004782 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b10      	cmp	r3, #16
 800477e:	d0f0      	beq.n	8004762 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	00030d40 	.word	0x00030d40

08004794 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004794:	b480      	push	{r7}
 8004796:	b089      	sub	sp, #36	; 0x24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	4611      	mov	r1, r2
 80047a0:	461a      	mov	r2, r3
 80047a2:	460b      	mov	r3, r1
 80047a4:	71fb      	strb	r3, [r7, #7]
 80047a6:	4613      	mov	r3, r2
 80047a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80047b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d11a      	bne.n	80047f0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047ba:	88bb      	ldrh	r3, [r7, #4]
 80047bc:	3303      	adds	r3, #3
 80047be:	089b      	lsrs	r3, r3, #2
 80047c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	e00f      	b.n	80047e8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	031a      	lsls	r2, r3, #12
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d4:	461a      	mov	r2, r3
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3304      	adds	r3, #4
 80047e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	3301      	adds	r3, #1
 80047e6:	61bb      	str	r3, [r7, #24]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d3eb      	bcc.n	80047c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3724      	adds	r7, #36	; 0x24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047fe:	b480      	push	{r7}
 8004800:	b089      	sub	sp, #36	; 0x24
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	4613      	mov	r3, r2
 800480a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	3303      	adds	r3, #3
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800481c:	2300      	movs	r3, #0
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	e00b      	b.n	800483a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	601a      	str	r2, [r3, #0]
    pDest++;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3304      	adds	r3, #4
 8004832:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	3301      	adds	r3, #1
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	429a      	cmp	r2, r3
 8004840:	d3ef      	bcc.n	8004822 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004842:	69fb      	ldr	r3, [r7, #28]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3724      	adds	r7, #36	; 0x24
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004868:	68fb      	ldr	r3, [r7, #12]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0301 	and.w	r3, r3, #1
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <USB_CoreReset+0x64>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e01b      	b.n	80048ea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	daf2      	bge.n	80048a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f043 0201 	orr.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <USB_CoreReset+0x64>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e006      	b.n	80048ea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d0f0      	beq.n	80048ca <USB_CoreReset+0x36>

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	00030d40 	.word	0x00030d40

080048fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048fc:	b084      	sub	sp, #16
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	f107 001c 	add.w	r0, r7, #28
 800490a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004918:	461a      	mov	r2, r3
 800491a:	2300      	movs	r3, #0
 800491c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494a:	2b00      	cmp	r3, #0
 800494c:	d018      	beq.n	8004980 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	2b01      	cmp	r3, #1
 8004952:	d10a      	bne.n	800496a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004962:	f043 0304 	orr.w	r3, r3, #4
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	e014      	b.n	8004994 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004978:	f023 0304 	bic.w	r3, r3, #4
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e009      	b.n	8004994 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800498e:	f023 0304 	bic.w	r3, r3, #4
 8004992:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004994:	2110      	movs	r1, #16
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff feb4 	bl	8004704 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff fed7 	bl	8004750 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e015      	b.n	80049d4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b4:	461a      	mov	r2, r3
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c8:	461a      	mov	r2, r3
 80049ca:	2300      	movs	r3, #0
 80049cc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3301      	adds	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d3e5      	bcc.n	80049a8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80049dc:	2101      	movs	r1, #1
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f8ac 	bl	8004b3c <USB_DriveVbus>

  HAL_Delay(200U);
 80049e4:	20c8      	movs	r0, #200	; 0xc8
 80049e6:	f7fc f90b 	bl	8000c00 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049f6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00b      	beq.n	8004a1c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a14      	ldr	r2, [pc, #80]	; (8004a60 <USB_HostInit+0x164>)
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <USB_HostInit+0x168>)
 8004a16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a1a:	e009      	b.n	8004a30 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2280      	movs	r2, #128	; 0x80
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a10      	ldr	r2, [pc, #64]	; (8004a68 <USB_HostInit+0x16c>)
 8004a26:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a10      	ldr	r2, [pc, #64]	; (8004a6c <USB_HostInit+0x170>)
 8004a2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d105      	bne.n	8004a42 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f043 0210 	orr.w	r2, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <USB_HostInit+0x174>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a5a:	b004      	add	sp, #16
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	01000200 	.word	0x01000200
 8004a64:	00e00300 	.word	0x00e00300
 8004a68:	00600080 	.word	0x00600080
 8004a6c:	004000e0 	.word	0x004000e0
 8004a70:	a3200008 	.word	0xa3200008

08004a74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a92:	f023 0303 	bic.w	r3, r3, #3
 8004a96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	68f9      	ldr	r1, [r7, #12]
 8004aa8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004aac:	4313      	orrs	r3, r2
 8004aae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d107      	bne.n	8004ac6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004abc:	461a      	mov	r2, r3
 8004abe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004ac2:	6053      	str	r3, [r2, #4]
 8004ac4:	e009      	b.n	8004ada <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d106      	bne.n	8004ada <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ad8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b16:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004b18:	2064      	movs	r0, #100	; 0x64
 8004b1a:	f7fc f871 	bl	8000c00 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004b2c:	200a      	movs	r0, #10
 8004b2e:	f7fc f867 	bl	8000c00 <HAL_Delay>

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d109      	bne.n	8004b80 <USB_DriveVbus+0x44>
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d106      	bne.n	8004b80 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b7e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8a:	d109      	bne.n	8004ba0 <USB_DriveVbus+0x64>
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b9e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	0c5b      	lsrs	r3, r3, #17
 8004bcc:	f003 0303 	and.w	r3, r3, #3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	b29b      	uxth	r3, r3
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	4608      	mov	r0, r1
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	70fb      	strb	r3, [r7, #3]
 8004c12:	460b      	mov	r3, r1
 8004c14:	70bb      	strb	r3, [r7, #2]
 8004c16:	4613      	mov	r3, r2
 8004c18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c34:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004c36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d87e      	bhi.n	8004d3c <USB_HC_Init+0x13c>
 8004c3e:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <USB_HC_Init+0x44>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c55 	.word	0x08004c55
 8004c48:	08004cff 	.word	0x08004cff
 8004c4c:	08004c55 	.word	0x08004c55
 8004c50:	08004cc1 	.word	0x08004cc1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c60:	461a      	mov	r2, r3
 8004c62:	f240 439d 	movw	r3, #1181	; 0x49d
 8004c66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004c68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	da10      	bge.n	8004c92 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004c90:	e057      	b.n	8004d42 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d051      	beq.n	8004d42 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cb8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004cbc:	60d3      	str	r3, [r2, #12]
      break;
 8004cbe:	e040      	b.n	8004d42 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f240 639d 	movw	r3, #1693	; 0x69d
 8004cd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004cd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	da34      	bge.n	8004d46 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfa:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004cfc:	e023      	b.n	8004d46 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f240 2325 	movw	r3, #549	; 0x225
 8004d10:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	da17      	bge.n	8004d4a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	0151      	lsls	r1, r2, #5
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	440a      	add	r2, r1
 8004d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d34:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004d38:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d3a:	e006      	b.n	8004d4a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d40:	e004      	b.n	8004d4c <USB_HC_Init+0x14c>
      break;
 8004d42:	bf00      	nop
 8004d44:	e002      	b.n	8004d4c <USB_HC_Init+0x14c>
      break;
 8004d46:	bf00      	nop
 8004d48:	e000      	b.n	8004d4c <USB_HC_Init+0x14c>
      break;
 8004d4a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d66:	4313      	orrs	r3, r2
 8004d68:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004d76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	da03      	bge.n	8004d86 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	e001      	b.n	8004d8a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004d8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d103      	bne.n	8004d9a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	e001      	b.n	8004d9e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d9e:	787b      	ldrb	r3, [r7, #1]
 8004da0:	059b      	lsls	r3, r3, #22
 8004da2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004da6:	78bb      	ldrb	r3, [r7, #2]
 8004da8:	02db      	lsls	r3, r3, #11
 8004daa:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dae:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004db0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004db4:	049b      	lsls	r3, r3, #18
 8004db6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004dba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004dc2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	0159      	lsls	r1, r3, #5
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	440b      	add	r3, r1
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dda:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d10f      	bne.n	8004e04 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	78fa      	ldrb	r2, [r7, #3]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e02:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop

08004e14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08c      	sub	sp, #48	; 0x30
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e30:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d028      	beq.n	8004e90 <USB_HC_StartXfer+0x7c>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	791b      	ldrb	r3, [r3, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d124      	bne.n	8004e90 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10b      	bne.n	8004e64 <USB_HC_StartXfer+0x50>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	795b      	ldrb	r3, [r3, #5]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d107      	bne.n	8004e64 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	785b      	ldrb	r3, [r3, #1]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fa2e 	bl	80052bc <USB_DoPing>
      return HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e112      	b.n	800508a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d112      	bne.n	8004e90 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	6a3a      	ldr	r2, [r7, #32]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e84:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004e88:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d018      	beq.n	8004eca <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	8912      	ldrh	r2, [r2, #8]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	8912      	ldrh	r2, [r2, #8]
 8004ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004eac:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004eae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004eb0:	8b7b      	ldrh	r3, [r7, #26]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d90b      	bls.n	8004ece <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004eb6:	8b7b      	ldrh	r3, [r7, #26]
 8004eb8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004eba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	8912      	ldrh	r2, [r2, #8]
 8004ec0:	fb02 f203 	mul.w	r2, r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	611a      	str	r2, [r3, #16]
 8004ec8:	e001      	b.n	8004ece <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	78db      	ldrb	r3, [r3, #3]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d006      	beq.n	8004ee4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004ed6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	8912      	ldrh	r2, [r2, #8]
 8004edc:	fb02 f203 	mul.w	r2, r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004eee:	04d9      	lsls	r1, r3, #19
 8004ef0:	4b68      	ldr	r3, [pc, #416]	; (8005094 <USB_HC_StartXfer+0x280>)
 8004ef2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ef4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	7a9b      	ldrb	r3, [r3, #10]
 8004efa:	075b      	lsls	r3, r3, #29
 8004efc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f00:	69f9      	ldr	r1, [r7, #28]
 8004f02:	0148      	lsls	r0, r1, #5
 8004f04:	6a39      	ldr	r1, [r7, #32]
 8004f06:	4401      	add	r1, r0
 8004f08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	68d9      	ldr	r1, [r3, #12]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	460a      	mov	r2, r1
 8004f28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	bf0c      	ite	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	2300      	movne	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	0151      	lsls	r1, r2, #5
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	440a      	add	r2, r1
 8004f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	7e7b      	ldrb	r3, [r7, #25]
 8004f72:	075b      	lsls	r3, r3, #29
 8004f74:	69f9      	ldr	r1, [r7, #28]
 8004f76:	0148      	lsls	r0, r1, #5
 8004f78:	6a39      	ldr	r1, [r7, #32]
 8004f7a:	4401      	add	r1, r0
 8004f7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004f80:	4313      	orrs	r3, r2
 8004f82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a41      	ldr	r2, [pc, #260]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004f94:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f96:	4b40      	ldr	r3, [pc, #256]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f9e:	4a3e      	ldr	r2, [pc, #248]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fa0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	78db      	ldrb	r3, [r3, #3]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d006      	beq.n	8004fb8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004faa:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb2:	4a39      	ldr	r2, [pc, #228]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e005      	b.n	8004fc4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004fb8:	4b37      	ldr	r3, [pc, #220]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fc0:	4a35      	ldr	r2, [pc, #212]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fc2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fc4:	4b34      	ldr	r3, [pc, #208]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fcc:	4a32      	ldr	r2, [pc, #200]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fce:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4b2e      	ldr	r3, [pc, #184]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d14e      	bne.n	8005088 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	78db      	ldrb	r3, [r3, #3]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d14a      	bne.n	8005088 <USB_HC_StartXfer+0x274>
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d046      	beq.n	8005088 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	79db      	ldrb	r3, [r3, #7]
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d830      	bhi.n	8005064 <USB_HC_StartXfer+0x250>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <USB_HC_StartXfer+0x1f4>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	08005019 	.word	0x08005019
 800500c:	0800503d 	.word	0x0800503d
 8005010:	08005019 	.word	0x08005019
 8005014:	0800503d 	.word	0x0800503d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	3303      	adds	r3, #3
 800501e:	089b      	lsrs	r3, r3, #2
 8005020:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005022:	8afa      	ldrh	r2, [r7, #22]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	b29b      	uxth	r3, r3
 800502a:	429a      	cmp	r2, r3
 800502c:	d91c      	bls.n	8005068 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	619a      	str	r2, [r3, #24]
          }
          break;
 800503a:	e015      	b.n	8005068 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	3303      	adds	r3, #3
 8005042:	089b      	lsrs	r3, r3, #2
 8005044:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005046:	8afa      	ldrh	r2, [r7, #22]
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	b29b      	uxth	r3, r3
 8005052:	429a      	cmp	r2, r3
 8005054:	d90a      	bls.n	800506c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	619a      	str	r2, [r3, #24]
          }
          break;
 8005062:	e003      	b.n	800506c <USB_HC_StartXfer+0x258>

        default:
          break;
 8005064:	bf00      	nop
 8005066:	e002      	b.n	800506e <USB_HC_StartXfer+0x25a>
          break;
 8005068:	bf00      	nop
 800506a:	e000      	b.n	800506e <USB_HC_StartXfer+0x25a>
          break;
 800506c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	68d9      	ldr	r1, [r3, #12]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	785a      	ldrb	r2, [r3, #1]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	b298      	uxth	r0, r3
 800507c:	2300      	movs	r3, #0
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	4603      	mov	r3, r0
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff fb86 	bl	8004794 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3728      	adds	r7, #40	; 0x28
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	1ff80000 	.word	0x1ff80000
 8005098:	200000b0 	.word	0x200000b0

0800509c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	b29b      	uxth	r3, r3
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80050be:	b480      	push	{r7}
 80050c0:	b087      	sub	sp, #28
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	460b      	mov	r3, r1
 80050c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	0c9b      	lsrs	r3, r3, #18
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <USB_HC_Halt+0x3a>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d16c      	bne.n	80051d2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	440a      	add	r2, r1
 800510e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005112:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005116:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d143      	bne.n	80051ac <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	440a      	add	r2, r1
 800513a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800513e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005142:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4413      	add	r3, r2
 800514c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	440a      	add	r2, r1
 800515a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800515e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005162:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4413      	add	r3, r2
 800516c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	440a      	add	r2, r1
 800517a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800517e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005182:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	3301      	adds	r3, #1
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005190:	d81d      	bhi.n	80051ce <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a8:	d0ec      	beq.n	8005184 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051aa:	e080      	b.n	80052ae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051ca:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051cc:	e06f      	b.n	80052ae <USB_HC_Halt+0x1f0>
          break;
 80051ce:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051d0:	e06d      	b.n	80052ae <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051f0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d143      	bne.n	800528a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4413      	add	r3, r2
 800520a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	440a      	add	r2, r1
 8005218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800521c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005220:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	4413      	add	r3, r2
 800522a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	0151      	lsls	r1, r2, #5
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	440a      	add	r2, r1
 8005238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800523c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005240:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4413      	add	r3, r2
 800524a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	440a      	add	r2, r1
 8005258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800525c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005260:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	3301      	adds	r3, #1
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800526e:	d81d      	bhi.n	80052ac <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005286:	d0ec      	beq.n	8005262 <USB_HC_Halt+0x1a4>
 8005288:	e011      	b.n	80052ae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e000      	b.n	80052ae <USB_HC_Halt+0x1f0>
          break;
 80052ac:	bf00      	nop
    }
  }

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80052d0:	2301      	movs	r3, #1
 80052d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	04da      	lsls	r2, r3, #19
 80052d8:	4b15      	ldr	r3, [pc, #84]	; (8005330 <USB_DoPing+0x74>)
 80052da:	4013      	ands	r3, r2
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	0151      	lsls	r1, r2, #5
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	440a      	add	r2, r1
 80052e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005304:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800530c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531a:	461a      	mov	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	1ff80000 	.word	0x1ff80000

08005334 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff f9a1 	bl	800468c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800534a:	2110      	movs	r1, #16
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff f9d9 	bl	8004704 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff f9fc 	bl	8004750 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005358:	2300      	movs	r3, #0
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	e01f      	b.n	800539e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005374:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800537c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005384:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005392:	461a      	mov	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	3301      	adds	r3, #1
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d9dc      	bls.n	800535e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	e034      	b.n	8005414 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053de:	461a      	mov	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	3301      	adds	r3, #1
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053f0:	d80c      	bhi.n	800540c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005408:	d0ec      	beq.n	80053e4 <USB_StopHost+0xb0>
 800540a:	e000      	b.n	800540e <USB_StopHost+0xda>
        break;
 800540c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	3301      	adds	r3, #1
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	2b0f      	cmp	r3, #15
 8005418:	d9c7      	bls.n	80053aa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005420:	461a      	mov	r2, r3
 8005422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005426:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800542e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff f91a 	bl	800466a <USB_EnableGlobalInt>

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b089      	sub	sp, #36	; 0x24
 8005444:	af04      	add	r7, sp, #16
 8005446:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005448:	2301      	movs	r3, #1
 800544a:	2202      	movs	r2, #2
 800544c:	2102      	movs	r1, #2
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fc68 	bl	8005d24 <USBH_FindInterface>
 8005454:	4603      	mov	r3, r0
 8005456:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2bff      	cmp	r3, #255	; 0xff
 800545c:	d002      	beq.n	8005464 <USBH_CDC_InterfaceInit+0x24>
 800545e:	7bfb      	ldrb	r3, [r7, #15]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d901      	bls.n	8005468 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005464:	2302      	movs	r3, #2
 8005466:	e13d      	b.n	80056e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fc3d 	bl	8005cec <USBH_SelectInterface>
 8005472:	4603      	mov	r3, r0
 8005474:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005476:	7bbb      	ldrb	r3, [r7, #14]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800547c:	2302      	movs	r3, #2
 800547e:	e131      	b.n	80056e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005486:	2050      	movs	r0, #80	; 0x50
 8005488:	f002 fa04 	bl	8007894 <malloc>
 800548c:	4603      	mov	r3, r0
 800548e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80054a0:	2302      	movs	r3, #2
 80054a2:	e11f      	b.n	80056e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80054a4:	2250      	movs	r2, #80	; 0x50
 80054a6:	2100      	movs	r1, #0
 80054a8:	68b8      	ldr	r0, [r7, #8]
 80054aa:	f002 fa03 	bl	80078b4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	211a      	movs	r1, #26
 80054b4:	fb01 f303 	mul.w	r3, r1, r3
 80054b8:	4413      	add	r3, r2
 80054ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	b25b      	sxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	da15      	bge.n	80054f2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	211a      	movs	r1, #26
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	4413      	add	r3, r2
 80054d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054d6:	781a      	ldrb	r2, [r3, #0]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	211a      	movs	r1, #26
 80054e2:	fb01 f303 	mul.w	r3, r1, r3
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80054ec:	881a      	ldrh	r2, [r3, #0]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	785b      	ldrb	r3, [r3, #1]
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f001 fe36 	bl	800716a <USBH_AllocPipe>
 80054fe:	4603      	mov	r3, r0
 8005500:	461a      	mov	r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	7819      	ldrb	r1, [r3, #0]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	7858      	ldrb	r0, [r3, #1]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	8952      	ldrh	r2, [r2, #10]
 800551e:	9202      	str	r2, [sp, #8]
 8005520:	2203      	movs	r2, #3
 8005522:	9201      	str	r2, [sp, #4]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	4623      	mov	r3, r4
 8005528:	4602      	mov	r2, r0
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f001 fdee 	bl	800710c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2200      	movs	r2, #0
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f002 f8fb 	bl	8007734 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800553e:	2300      	movs	r3, #0
 8005540:	2200      	movs	r2, #0
 8005542:	210a      	movs	r1, #10
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fbed 	bl	8005d24 <USBH_FindInterface>
 800554a:	4603      	mov	r3, r0
 800554c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	2bff      	cmp	r3, #255	; 0xff
 8005552:	d002      	beq.n	800555a <USBH_CDC_InterfaceInit+0x11a>
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d901      	bls.n	800555e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800555a:	2302      	movs	r3, #2
 800555c:	e0c2      	b.n	80056e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	211a      	movs	r1, #26
 8005564:	fb01 f303 	mul.w	r3, r1, r3
 8005568:	4413      	add	r3, r2
 800556a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	b25b      	sxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	da16      	bge.n	80055a4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	211a      	movs	r1, #26
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	4413      	add	r3, r2
 8005582:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005586:	781a      	ldrb	r2, [r3, #0]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	211a      	movs	r1, #26
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	4413      	add	r3, r2
 8005598:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800559c:	881a      	ldrh	r2, [r3, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	835a      	strh	r2, [r3, #26]
 80055a2:	e015      	b.n	80055d0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	211a      	movs	r1, #26
 80055aa:	fb01 f303 	mul.w	r3, r1, r3
 80055ae:	4413      	add	r3, r2
 80055b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055b4:	781a      	ldrb	r2, [r3, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	211a      	movs	r1, #26
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055ca:	881a      	ldrh	r2, [r3, #0]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	211a      	movs	r1, #26
 80055d6:	fb01 f303 	mul.w	r3, r1, r3
 80055da:	4413      	add	r3, r2
 80055dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	b25b      	sxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	da16      	bge.n	8005616 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	211a      	movs	r1, #26
 80055ee:	fb01 f303 	mul.w	r3, r1, r3
 80055f2:	4413      	add	r3, r2
 80055f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	211a      	movs	r1, #26
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	4413      	add	r3, r2
 800560a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800560e:	881a      	ldrh	r2, [r3, #0]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	835a      	strh	r2, [r3, #26]
 8005614:	e015      	b.n	8005642 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	211a      	movs	r1, #26
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	4413      	add	r3, r2
 8005622:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005626:	781a      	ldrb	r2, [r3, #0]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	211a      	movs	r1, #26
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800563c:	881a      	ldrh	r2, [r3, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	7b9b      	ldrb	r3, [r3, #14]
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f001 fd8e 	bl	800716a <USBH_AllocPipe>
 800564e:	4603      	mov	r3, r0
 8005650:	461a      	mov	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	7bdb      	ldrb	r3, [r3, #15]
 800565a:	4619      	mov	r1, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f001 fd84 	bl	800716a <USBH_AllocPipe>
 8005662:	4603      	mov	r3, r0
 8005664:	461a      	mov	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	7b59      	ldrb	r1, [r3, #13]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	7b98      	ldrb	r0, [r3, #14]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	8b12      	ldrh	r2, [r2, #24]
 8005682:	9202      	str	r2, [sp, #8]
 8005684:	2202      	movs	r2, #2
 8005686:	9201      	str	r2, [sp, #4]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4623      	mov	r3, r4
 800568c:	4602      	mov	r2, r0
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f001 fd3c 	bl	800710c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	7b19      	ldrb	r1, [r3, #12]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	7bd8      	ldrb	r0, [r3, #15]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	8b52      	ldrh	r2, [r2, #26]
 80056ac:	9202      	str	r2, [sp, #8]
 80056ae:	2202      	movs	r2, #2
 80056b0:	9201      	str	r2, [sp, #4]
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	4623      	mov	r3, r4
 80056b6:	4602      	mov	r2, r0
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f001 fd27 	bl	800710c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	7b5b      	ldrb	r3, [r3, #13]
 80056ca:	2200      	movs	r2, #0
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f002 f830 	bl	8007734 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	7b1b      	ldrb	r3, [r3, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f002 f829 	bl	8007734 <USBH_LL_SetToggle>

  return USBH_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd90      	pop	{r4, r7, pc}

080056ec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00e      	beq.n	8005724 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 fd1c 	bl	800714a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 fd47 	bl	80071ac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	7b1b      	ldrb	r3, [r3, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00e      	beq.n	800574a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	7b1b      	ldrb	r3, [r3, #12]
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f001 fd09 	bl	800714a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	7b1b      	ldrb	r3, [r3, #12]
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f001 fd34 	bl	80071ac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	7b5b      	ldrb	r3, [r3, #13]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00e      	beq.n	8005770 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	7b5b      	ldrb	r3, [r3, #13]
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f001 fcf6 	bl	800714a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	7b5b      	ldrb	r3, [r3, #13]
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 fd21 	bl	80071ac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00b      	beq.n	8005794 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	4618      	mov	r0, r3
 8005786:	f002 f88d 	bl	80078a4 <free>
    phost->pActiveClass->pData = 0U;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005790:	2200      	movs	r2, #0
 8005792:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3340      	adds	r3, #64	; 0x40
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f8b1 	bl	800591e <GetLineCoding>
 80057bc:	4603      	mov	r3, r0
 80057be:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d105      	bne.n	80057d2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80057cc:	2102      	movs	r1, #2
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80057d2:	7afb      	ldrb	r3, [r7, #11]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80057e4:	2301      	movs	r3, #1
 80057e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d877      	bhi.n	80058f0 <USBH_CDC_Process+0x114>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <USBH_CDC_Process+0x2c>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	0800581d 	.word	0x0800581d
 800580c:	08005823 	.word	0x08005823
 8005810:	08005853 	.word	0x08005853
 8005814:	080058c7 	.word	0x080058c7
 8005818:	080058d5 	.word	0x080058d5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	73fb      	strb	r3, [r7, #15]
      break;
 8005820:	e06d      	b.n	80058fe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f897 	bl	800595c <SetLineCoding>
 800582e:	4603      	mov	r3, r0
 8005830:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005832:	7bbb      	ldrb	r3, [r7, #14]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d104      	bne.n	8005842 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005840:	e058      	b.n	80058f4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005842:	7bbb      	ldrb	r3, [r7, #14]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d055      	beq.n	80058f4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2204      	movs	r2, #4
 800584c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005850:	e050      	b.n	80058f4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	3340      	adds	r3, #64	; 0x40
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f860 	bl	800591e <GetLineCoding>
 800585e:	4603      	mov	r3, r0
 8005860:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005862:	7bbb      	ldrb	r3, [r7, #14]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d126      	bne.n	80058b6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587a:	791b      	ldrb	r3, [r3, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d13b      	bne.n	80058f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800588c:	429a      	cmp	r2, r3
 800588e:	d133      	bne.n	80058f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800589c:	429a      	cmp	r2, r3
 800589e:	d12b      	bne.n	80058f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058a8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d124      	bne.n	80058f8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f95a 	bl	8005b68 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80058b4:	e020      	b.n	80058f8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80058b6:	7bbb      	ldrb	r3, [r7, #14]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d01d      	beq.n	80058f8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2204      	movs	r2, #4
 80058c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80058c4:	e018      	b.n	80058f8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f867 	bl	800599a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f8dc 	bl	8005a8a <CDC_ProcessReception>
      break;
 80058d2:	e014      	b.n	80058fe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80058d4:	2100      	movs	r1, #0
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 ffe5 	bl	80068a6 <USBH_ClrFeature>
 80058dc:	4603      	mov	r3, r0
 80058de:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80058e0:	7bbb      	ldrb	r3, [r7, #14]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10a      	bne.n	80058fc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80058ee:	e005      	b.n	80058fc <USBH_CDC_Process+0x120>

    default:
      break;
 80058f0:	bf00      	nop
 80058f2:	e004      	b.n	80058fe <USBH_CDC_Process+0x122>
      break;
 80058f4:	bf00      	nop
 80058f6:	e002      	b.n	80058fe <USBH_CDC_Process+0x122>
      break;
 80058f8:	bf00      	nop
 80058fa:	e000      	b.n	80058fe <USBH_CDC_Process+0x122>
      break;
 80058fc:	bf00      	nop

  }

  return status;
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	22a1      	movs	r2, #161	; 0xa1
 800592c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2221      	movs	r2, #33	; 0x21
 8005932:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2207      	movs	r2, #7
 8005944:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2207      	movs	r2, #7
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f001 f98a 	bl	8006c66 <USBH_CtlReq>
 8005952:	4603      	mov	r3, r0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2221      	movs	r2, #33	; 0x21
 800596a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2207      	movs	r2, #7
 8005982:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2207      	movs	r2, #7
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f001 f96b 	bl	8006c66 <USBH_CtlReq>
 8005990:	4603      	mov	r3, r0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b086      	sub	sp, #24
 800599e:	af02      	add	r7, sp, #8
 80059a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d002      	beq.n	80059c0 <CDC_ProcessTransmission+0x26>
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d025      	beq.n	8005a0a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80059be:	e060      	b.n	8005a82 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	8b12      	ldrh	r2, [r2, #24]
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d90c      	bls.n	80059e6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	69d9      	ldr	r1, [r3, #28]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8b1a      	ldrh	r2, [r3, #24]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	7b58      	ldrb	r0, [r3, #13]
 80059d8:	2301      	movs	r3, #1
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	4603      	mov	r3, r0
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 fb51 	bl	8007086 <USBH_BulkSendData>
 80059e4:	e00c      	b.n	8005a00 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	7b58      	ldrb	r0, [r3, #13]
 80059f4:	2301      	movs	r3, #1
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	4603      	mov	r3, r0
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 fb43 	bl	8007086 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a08:	e03b      	b.n	8005a82 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	7b5b      	ldrb	r3, [r3, #13]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f001 fe65 	bl	80076e0 <USBH_LL_GetURBState>
 8005a16:	4603      	mov	r3, r0
 8005a18:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005a1a:	7afb      	ldrb	r3, [r7, #11]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d128      	bne.n	8005a72 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	8b12      	ldrh	r2, [r2, #24]
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d90e      	bls.n	8005a4a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	8b12      	ldrh	r2, [r2, #24]
 8005a34:	1a9a      	subs	r2, r3, r2
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	8b12      	ldrh	r2, [r2, #24]
 8005a42:	441a      	add	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	61da      	str	r2, [r3, #28]
 8005a48:	e002      	b.n	8005a50 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d004      	beq.n	8005a62 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a60:	e00e      	b.n	8005a80 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f868 	bl	8005b40 <USBH_CDC_TransmitCallback>
      break;
 8005a70:	e006      	b.n	8005a80 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8005a72:	7afb      	ldrb	r3, [r7, #11]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d103      	bne.n	8005a80 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a80:	bf00      	nop
  }
}
 8005a82:	bf00      	nop
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b086      	sub	sp, #24
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d002      	beq.n	8005ab0 <CDC_ProcessReception+0x26>
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d00e      	beq.n	8005acc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005aae:	e043      	b.n	8005b38 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	6a19      	ldr	r1, [r3, #32]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	8b5a      	ldrh	r2, [r3, #26]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	7b1b      	ldrb	r3, [r3, #12]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f001 fb07 	bl	80070d0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2204      	movs	r2, #4
 8005ac6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005aca:	e035      	b.n	8005b38 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	7b1b      	ldrb	r3, [r3, #12]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f001 fe04 	bl	80076e0 <USBH_LL_GetURBState>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005adc:	7cfb      	ldrb	r3, [r7, #19]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d129      	bne.n	8005b36 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	7b1b      	ldrb	r3, [r3, #12]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f001 fd67 	bl	80075bc <USBH_LL_GetLastXferSize>
 8005aee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d016      	beq.n	8005b28 <CDC_ProcessReception+0x9e>
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	8b5b      	ldrh	r3, [r3, #26]
 8005afe:	461a      	mov	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d910      	bls.n	8005b28 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1ad2      	subs	r2, r2, r3
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	6a1a      	ldr	r2, [r3, #32]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	441a      	add	r2, r3
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2203      	movs	r2, #3
 8005b22:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b26:	e006      	b.n	8005b36 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f80f 	bl	8005b54 <USBH_CDC_ReceiveCallback>
      break;
 8005b36:	bf00      	nop
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	4613      	mov	r3, r2
 8005b88:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005b90:	2302      	movs	r3, #2
 8005b92:	e029      	b.n	8005be8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	79fa      	ldrb	r2, [r7, #7]
 8005b98:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f81f 	bl	8005bf0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f001 fc39 	bl	8007458 <USBH_LL_Init>

  return USBH_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	e009      	b.n	8005c16 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	33e0      	adds	r3, #224	; 0xe0
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b0e      	cmp	r3, #14
 8005c1a:	d9f2      	bls.n	8005c02 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	e009      	b.n	8005c36 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3301      	adds	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c3c:	d3f1      	bcc.n	8005c22 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2240      	movs	r2, #64	; 0x40
 8005c62:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d016      	beq.n	8005cda <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10e      	bne.n	8005cd4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005cbc:	1c59      	adds	r1, r3, #1
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	33de      	adds	r3, #222	; 0xde
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]
 8005cd2:	e004      	b.n	8005cde <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	73fb      	strb	r3, [r7, #15]
 8005cd8:	e001      	b.n	8005cde <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005cda:	2302      	movs	r3, #2
 8005cdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d204      	bcs.n	8005d12 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	78fa      	ldrb	r2, [r7, #3]
 8005d0c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005d10:	e001      	b.n	8005d16 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005d12:	2302      	movs	r3, #2
 8005d14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	4608      	mov	r0, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	461a      	mov	r2, r3
 8005d32:	4603      	mov	r3, r0
 8005d34:	70fb      	strb	r3, [r7, #3]
 8005d36:	460b      	mov	r3, r1
 8005d38:	70bb      	strb	r3, [r7, #2]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005d4c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d4e:	e025      	b.n	8005d9c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005d50:	7dfb      	ldrb	r3, [r7, #23]
 8005d52:	221a      	movs	r2, #26
 8005d54:	fb02 f303 	mul.w	r3, r2, r3
 8005d58:	3308      	adds	r3, #8
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	3302      	adds	r3, #2
 8005d60:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	795b      	ldrb	r3, [r3, #5]
 8005d66:	78fa      	ldrb	r2, [r7, #3]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d002      	beq.n	8005d72 <USBH_FindInterface+0x4e>
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	2bff      	cmp	r3, #255	; 0xff
 8005d70:	d111      	bne.n	8005d96 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d76:	78ba      	ldrb	r2, [r7, #2]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d002      	beq.n	8005d82 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d7c:	78bb      	ldrb	r3, [r7, #2]
 8005d7e:	2bff      	cmp	r3, #255	; 0xff
 8005d80:	d109      	bne.n	8005d96 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d86:	787a      	ldrb	r2, [r7, #1]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d002      	beq.n	8005d92 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d8c:	787b      	ldrb	r3, [r7, #1]
 8005d8e:	2bff      	cmp	r3, #255	; 0xff
 8005d90:	d101      	bne.n	8005d96 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
 8005d94:	e006      	b.n	8005da4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d9d6      	bls.n	8005d50 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005da2:	23ff      	movs	r3, #255	; 0xff
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 fb89 	bl	80074d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f001 fca0 	bl	8007706 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af04      	add	r7, sp, #16
 8005dd6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d102      	bne.n	8005df2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2203      	movs	r2, #3
 8005df0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b0b      	cmp	r3, #11
 8005dfa:	f200 81b3 	bhi.w	8006164 <USBH_Process+0x394>
 8005dfe:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <USBH_Process+0x34>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e35 	.word	0x08005e35
 8005e08:	08005e67 	.word	0x08005e67
 8005e0c:	08005ecf 	.word	0x08005ecf
 8005e10:	080060ff 	.word	0x080060ff
 8005e14:	08006165 	.word	0x08006165
 8005e18:	08005f73 	.word	0x08005f73
 8005e1c:	080060a5 	.word	0x080060a5
 8005e20:	08005fa9 	.word	0x08005fa9
 8005e24:	08005fc9 	.word	0x08005fc9
 8005e28:	08005fe9 	.word	0x08005fe9
 8005e2c:	08006017 	.word	0x08006017
 8005e30:	080060e7 	.word	0x080060e7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8193 	beq.w	8006168 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005e48:	20c8      	movs	r0, #200	; 0xc8
 8005e4a:	f001 fca6 	bl	800779a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f001 fb99 	bl	8007586 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005e64:	e180      	b.n	8006168 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d107      	bne.n	8005e80 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e7e:	e182      	b.n	8006186 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e8a:	d914      	bls.n	8005eb6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005e92:	3301      	adds	r3, #1
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d903      	bls.n	8005eae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	220d      	movs	r2, #13
 8005eaa:	701a      	strb	r2, [r3, #0]
      break;
 8005eac:	e16b      	b.n	8006186 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	701a      	strb	r2, [r3, #0]
      break;
 8005eb4:	e167      	b.n	8006186 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005ebc:	f103 020a 	add.w	r2, r3, #10
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005ec6:	200a      	movs	r0, #10
 8005ec8:	f001 fc67 	bl	800779a <USBH_Delay>
      break;
 8005ecc:	e15b      	b.n	8006186 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ede:	2104      	movs	r1, #4
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005ee4:	2064      	movs	r0, #100	; 0x64
 8005ee6:	f001 fc58 	bl	800779a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f001 fb26 	bl	800753c <USBH_LL_GetSpeed>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2205      	movs	r2, #5
 8005efe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005f00:	2100      	movs	r1, #0
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 f931 	bl	800716a <USBH_AllocPipe>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005f10:	2180      	movs	r1, #128	; 0x80
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 f929 	bl	800716a <USBH_AllocPipe>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	7919      	ldrb	r1, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f34:	b292      	uxth	r2, r2
 8005f36:	9202      	str	r2, [sp, #8]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	9201      	str	r2, [sp, #4]
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2280      	movs	r2, #128	; 0x80
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f001 f8e2 	bl	800710c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7959      	ldrb	r1, [r3, #5]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f5c:	b292      	uxth	r2, r2
 8005f5e:	9202      	str	r2, [sp, #8]
 8005f60:	2200      	movs	r2, #0
 8005f62:	9201      	str	r2, [sp, #4]
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	4603      	mov	r3, r0
 8005f68:	2200      	movs	r2, #0
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f001 f8ce 	bl	800710c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f70:	e109      	b.n	8006186 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f90c 	bl	8006190 <USBH_HandleEnum>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f040 80f3 	bne.w	800616c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d103      	bne.n	8005fa0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2208      	movs	r2, #8
 8005f9c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005f9e:	e0e5      	b.n	800616c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2207      	movs	r2, #7
 8005fa4:	701a      	strb	r2, [r3, #0]
      break;
 8005fa6:	e0e1      	b.n	800616c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 80de 	beq.w	8006170 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fba:	2101      	movs	r1, #1
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005fc6:	e0d3      	b.n	8006170 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fc20 	bl	8006818 <USBH_SetCfg>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f040 80ca 	bne.w	8006174 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2209      	movs	r2, #9
 8005fe4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005fe6:	e0c5      	b.n	8006174 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fc30 	bl	800685e <USBH_SetFeature>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	f040 80b9 	bne.w	8006178 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	220a      	movs	r2, #10
 800600a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800600c:	e0b4      	b.n	8006178 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	220a      	movs	r2, #10
 8006012:	701a      	strb	r2, [r3, #0]
      break;
 8006014:	e0b0      	b.n	8006178 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80ad 	beq.w	800617c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]
 800602e:	e016      	b.n	800605e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006030:	7bfa      	ldrb	r2, [r7, #15]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	32de      	adds	r2, #222	; 0xde
 8006036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603a:	791a      	ldrb	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006042:	429a      	cmp	r2, r3
 8006044:	d108      	bne.n	8006058 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006046:	7bfa      	ldrb	r2, [r7, #15]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	32de      	adds	r2, #222	; 0xde
 800604c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006056:	e005      	b.n	8006064 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	3301      	adds	r3, #1
 800605c:	73fb      	strb	r3, [r7, #15]
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0e5      	beq.n	8006030 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d016      	beq.n	800609c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	4798      	blx	r3
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d109      	bne.n	8006094 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2206      	movs	r2, #6
 8006084:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800608c:	2103      	movs	r1, #3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006092:	e073      	b.n	800617c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	220d      	movs	r2, #13
 8006098:	701a      	strb	r2, [r3, #0]
      break;
 800609a:	e06f      	b.n	800617c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	220d      	movs	r2, #13
 80060a0:	701a      	strb	r2, [r3, #0]
      break;
 80060a2:	e06b      	b.n	800617c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d017      	beq.n	80060de <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	4798      	blx	r3
 80060ba:	4603      	mov	r3, r0
 80060bc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80060be:	7bbb      	ldrb	r3, [r7, #14]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d103      	bne.n	80060ce <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	220b      	movs	r2, #11
 80060ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060cc:	e058      	b.n	8006180 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80060ce:	7bbb      	ldrb	r3, [r7, #14]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d154      	bne.n	8006180 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	220d      	movs	r2, #13
 80060da:	701a      	strb	r2, [r3, #0]
      break;
 80060dc:	e050      	b.n	8006180 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	220d      	movs	r2, #13
 80060e2:	701a      	strb	r2, [r3, #0]
      break;
 80060e4:	e04c      	b.n	8006180 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d049      	beq.n	8006184 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	4798      	blx	r3
      }
      break;
 80060fc:	e042      	b.n	8006184 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff fd72 	bl	8005bf0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800613a:	2105      	movs	r1, #5
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d107      	bne.n	800615c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff fe2b 	bl	8005db0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800615a:	e014      	b.n	8006186 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 f9b7 	bl	80074d0 <USBH_LL_Start>
      break;
 8006162:	e010      	b.n	8006186 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006164:	bf00      	nop
 8006166:	e00e      	b.n	8006186 <USBH_Process+0x3b6>
      break;
 8006168:	bf00      	nop
 800616a:	e00c      	b.n	8006186 <USBH_Process+0x3b6>
      break;
 800616c:	bf00      	nop
 800616e:	e00a      	b.n	8006186 <USBH_Process+0x3b6>
    break;
 8006170:	bf00      	nop
 8006172:	e008      	b.n	8006186 <USBH_Process+0x3b6>
      break;
 8006174:	bf00      	nop
 8006176:	e006      	b.n	8006186 <USBH_Process+0x3b6>
      break;
 8006178:	bf00      	nop
 800617a:	e004      	b.n	8006186 <USBH_Process+0x3b6>
      break;
 800617c:	bf00      	nop
 800617e:	e002      	b.n	8006186 <USBH_Process+0x3b6>
      break;
 8006180:	bf00      	nop
 8006182:	e000      	b.n	8006186 <USBH_Process+0x3b6>
      break;
 8006184:	bf00      	nop
  }
  return USBH_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af04      	add	r7, sp, #16
 8006196:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006198:	2301      	movs	r3, #1
 800619a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800619c:	2301      	movs	r3, #1
 800619e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	785b      	ldrb	r3, [r3, #1]
 80061a4:	2b07      	cmp	r3, #7
 80061a6:	f200 81c1 	bhi.w	800652c <USBH_HandleEnum+0x39c>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <USBH_HandleEnum+0x20>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061d1 	.word	0x080061d1
 80061b4:	0800628f 	.word	0x0800628f
 80061b8:	080062f9 	.word	0x080062f9
 80061bc:	08006387 	.word	0x08006387
 80061c0:	080063f1 	.word	0x080063f1
 80061c4:	08006461 	.word	0x08006461
 80061c8:	080064a7 	.word	0x080064a7
 80061cc:	080064ed 	.word	0x080064ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80061d0:	2108      	movs	r1, #8
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa50 	bl	8006678 <USBH_Get_DevDesc>
 80061d8:	4603      	mov	r3, r0
 80061da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80061dc:	7bbb      	ldrb	r3, [r7, #14]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d130      	bne.n	8006244 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	7919      	ldrb	r1, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006206:	b292      	uxth	r2, r2
 8006208:	9202      	str	r2, [sp, #8]
 800620a:	2200      	movs	r2, #0
 800620c:	9201      	str	r2, [sp, #4]
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	4603      	mov	r3, r0
 8006212:	2280      	movs	r2, #128	; 0x80
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 ff79 	bl	800710c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	7959      	ldrb	r1, [r3, #5]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800622e:	b292      	uxth	r2, r2
 8006230:	9202      	str	r2, [sp, #8]
 8006232:	2200      	movs	r2, #0
 8006234:	9201      	str	r2, [sp, #4]
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	4603      	mov	r3, r0
 800623a:	2200      	movs	r2, #0
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 ff65 	bl	800710c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006242:	e175      	b.n	8006530 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006244:	7bbb      	ldrb	r3, [r7, #14]
 8006246:	2b03      	cmp	r3, #3
 8006248:	f040 8172 	bne.w	8006530 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006252:	3301      	adds	r3, #1
 8006254:	b2da      	uxtb	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006262:	2b03      	cmp	r3, #3
 8006264:	d903      	bls.n	800626e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	220d      	movs	r2, #13
 800626a:	701a      	strb	r2, [r3, #0]
      break;
 800626c:	e160      	b.n	8006530 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	795b      	ldrb	r3, [r3, #5]
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 ff99 	bl	80071ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	791b      	ldrb	r3, [r3, #4]
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 ff93 	bl	80071ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]
      break;
 800628c:	e150      	b.n	8006530 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800628e:	2112      	movs	r1, #18
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f9f1 	bl	8006678 <USBH_Get_DevDesc>
 8006296:	4603      	mov	r3, r0
 8006298:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d103      	bne.n	80062a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80062a6:	e145      	b.n	8006534 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80062a8:	7bbb      	ldrb	r3, [r7, #14]
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	f040 8142 	bne.w	8006534 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062b6:	3301      	adds	r3, #1
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d903      	bls.n	80062d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	220d      	movs	r2, #13
 80062ce:	701a      	strb	r2, [r3, #0]
      break;
 80062d0:	e130      	b.n	8006534 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	795b      	ldrb	r3, [r3, #5]
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 ff67 	bl	80071ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	791b      	ldrb	r3, [r3, #4]
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 ff61 	bl	80071ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]
      break;
 80062f6:	e11d      	b.n	8006534 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80062f8:	2101      	movs	r1, #1
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fa68 	bl	80067d0 <USBH_SetAddress>
 8006300:	4603      	mov	r3, r0
 8006302:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d132      	bne.n	8006370 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800630a:	2002      	movs	r0, #2
 800630c:	f001 fa45 	bl	800779a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2203      	movs	r2, #3
 800631c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	7919      	ldrb	r1, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006332:	b292      	uxth	r2, r2
 8006334:	9202      	str	r2, [sp, #8]
 8006336:	2200      	movs	r2, #0
 8006338:	9201      	str	r2, [sp, #4]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4603      	mov	r3, r0
 800633e:	2280      	movs	r2, #128	; 0x80
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fee3 	bl	800710c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	7959      	ldrb	r1, [r3, #5]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800635a:	b292      	uxth	r2, r2
 800635c:	9202      	str	r2, [sp, #8]
 800635e:	2200      	movs	r2, #0
 8006360:	9201      	str	r2, [sp, #4]
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	4603      	mov	r3, r0
 8006366:	2200      	movs	r2, #0
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fecf 	bl	800710c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800636e:	e0e3      	b.n	8006538 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006370:	7bbb      	ldrb	r3, [r7, #14]
 8006372:	2b03      	cmp	r3, #3
 8006374:	f040 80e0 	bne.w	8006538 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	220d      	movs	r2, #13
 800637c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	705a      	strb	r2, [r3, #1]
      break;
 8006384:	e0d8      	b.n	8006538 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006386:	2109      	movs	r1, #9
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f99d 	bl	80066c8 <USBH_Get_CfgDesc>
 800638e:	4603      	mov	r3, r0
 8006390:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d103      	bne.n	80063a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2204      	movs	r2, #4
 800639c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800639e:	e0cd      	b.n	800653c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	f040 80ca 	bne.w	800653c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063ae:	3301      	adds	r3, #1
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d903      	bls.n	80063ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	220d      	movs	r2, #13
 80063c6:	701a      	strb	r2, [r3, #0]
      break;
 80063c8:	e0b8      	b.n	800653c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	795b      	ldrb	r3, [r3, #5]
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 feeb 	bl	80071ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	791b      	ldrb	r3, [r3, #4]
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fee5 	bl	80071ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	701a      	strb	r2, [r3, #0]
      break;
 80063ee:	e0a5      	b.n	800653c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f965 	bl	80066c8 <USBH_Get_CfgDesc>
 80063fe:	4603      	mov	r3, r0
 8006400:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006402:	7bbb      	ldrb	r3, [r7, #14]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2205      	movs	r2, #5
 800640c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800640e:	e097      	b.n	8006540 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006410:	7bbb      	ldrb	r3, [r7, #14]
 8006412:	2b03      	cmp	r3, #3
 8006414:	f040 8094 	bne.w	8006540 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800641e:	3301      	adds	r3, #1
 8006420:	b2da      	uxtb	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800642e:	2b03      	cmp	r3, #3
 8006430:	d903      	bls.n	800643a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	220d      	movs	r2, #13
 8006436:	701a      	strb	r2, [r3, #0]
      break;
 8006438:	e082      	b.n	8006540 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	795b      	ldrb	r3, [r3, #5]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 feb3 	bl	80071ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	791b      	ldrb	r3, [r3, #4]
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fead 	bl	80071ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
      break;
 800645e:	e06f      	b.n	8006540 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006466:	2b00      	cmp	r3, #0
 8006468:	d019      	beq.n	800649e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006476:	23ff      	movs	r3, #255	; 0xff
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f949 	bl	8006710 <USBH_Get_StringDesc>
 800647e:	4603      	mov	r3, r0
 8006480:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d103      	bne.n	8006490 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2206      	movs	r2, #6
 800648c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800648e:	e059      	b.n	8006544 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	2b03      	cmp	r3, #3
 8006494:	d156      	bne.n	8006544 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2206      	movs	r2, #6
 800649a:	705a      	strb	r2, [r3, #1]
      break;
 800649c:	e052      	b.n	8006544 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2206      	movs	r2, #6
 80064a2:	705a      	strb	r2, [r3, #1]
      break;
 80064a4:	e04e      	b.n	8006544 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d019      	beq.n	80064e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80064bc:	23ff      	movs	r3, #255	; 0xff
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f926 	bl	8006710 <USBH_Get_StringDesc>
 80064c4:	4603      	mov	r3, r0
 80064c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d103      	bne.n	80064d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2207      	movs	r2, #7
 80064d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80064d4:	e038      	b.n	8006548 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064d6:	7bbb      	ldrb	r3, [r7, #14]
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d135      	bne.n	8006548 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2207      	movs	r2, #7
 80064e0:	705a      	strb	r2, [r3, #1]
      break;
 80064e2:	e031      	b.n	8006548 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2207      	movs	r2, #7
 80064e8:	705a      	strb	r2, [r3, #1]
      break;
 80064ea:	e02d      	b.n	8006548 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d017      	beq.n	8006526 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006502:	23ff      	movs	r3, #255	; 0xff
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f903 	bl	8006710 <USBH_Get_StringDesc>
 800650a:	4603      	mov	r3, r0
 800650c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d102      	bne.n	800651a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006518:	e018      	b.n	800654c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	2b03      	cmp	r3, #3
 800651e:	d115      	bne.n	800654c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	73fb      	strb	r3, [r7, #15]
      break;
 8006524:	e012      	b.n	800654c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]
      break;
 800652a:	e00f      	b.n	800654c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800652c:	bf00      	nop
 800652e:	e00e      	b.n	800654e <USBH_HandleEnum+0x3be>
      break;
 8006530:	bf00      	nop
 8006532:	e00c      	b.n	800654e <USBH_HandleEnum+0x3be>
      break;
 8006534:	bf00      	nop
 8006536:	e00a      	b.n	800654e <USBH_HandleEnum+0x3be>
      break;
 8006538:	bf00      	nop
 800653a:	e008      	b.n	800654e <USBH_HandleEnum+0x3be>
      break;
 800653c:	bf00      	nop
 800653e:	e006      	b.n	800654e <USBH_HandleEnum+0x3be>
      break;
 8006540:	bf00      	nop
 8006542:	e004      	b.n	800654e <USBH_HandleEnum+0x3be>
      break;
 8006544:	bf00      	nop
 8006546:	e002      	b.n	800654e <USBH_HandleEnum+0x3be>
      break;
 8006548:	bf00      	nop
 800654a:	e000      	b.n	800654e <USBH_HandleEnum+0x3be>
      break;
 800654c:	bf00      	nop
  }
  return Status;
 800654e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b082      	sub	sp, #8
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f804 	bl	800659a <USBH_HandleSof>
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b0b      	cmp	r3, #11
 80065aa:	d10a      	bne.n	80065c2 <USBH_HandleSof+0x28>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d005      	beq.n	80065c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
  }
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80065da:	bf00      	nop
}
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80065f6:	bf00      	nop
}
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 ff58 	bl	8007506 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	791b      	ldrb	r3, [r3, #4]
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fda5 	bl	80071ac <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	795b      	ldrb	r3, [r3, #5]
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fd9f 	bl	80071ac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af02      	add	r7, sp, #8
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	b29b      	uxth	r3, r3
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	4613      	mov	r3, r2
 8006692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006696:	2100      	movs	r1, #0
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f864 	bl	8006766 <USBH_GetDescriptor>
 800669e:	4603      	mov	r3, r0
 80066a0:	73fb      	strb	r3, [r7, #15]
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f203 3026 	addw	r0, r3, #806	; 0x326
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80066b4:	78fa      	ldrb	r2, [r7, #3]
 80066b6:	b292      	uxth	r2, r2
 80066b8:	4619      	mov	r1, r3
 80066ba:	f000 f918 	bl	80068ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80066be:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	331c      	adds	r3, #28
 80066d8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80066da:	887b      	ldrh	r3, [r7, #2]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e4:	2100      	movs	r1, #0
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f83d 	bl	8006766 <USBH_GetDescriptor>
 80066ec:	4603      	mov	r3, r0
 80066ee:	72fb      	strb	r3, [r7, #11]
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d107      	bne.n	8006706 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80066fc:	887a      	ldrh	r2, [r7, #2]
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	4618      	mov	r0, r3
 8006702:	f000 f964 	bl	80069ce <USBH_ParseCfgDesc>
  }

  return status;
 8006706:	7afb      	ldrb	r3, [r7, #11]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	461a      	mov	r2, r3
 800671c:	460b      	mov	r3, r1
 800671e:	72fb      	strb	r3, [r7, #11]
 8006720:	4613      	mov	r3, r2
 8006722:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	b29b      	uxth	r3, r3
 8006728:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800672c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006734:	893b      	ldrh	r3, [r7, #8]
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	460b      	mov	r3, r1
 800673a:	2100      	movs	r1, #0
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f812 	bl	8006766 <USBH_GetDescriptor>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]
 8006746:	7dfb      	ldrb	r3, [r7, #23]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d107      	bne.n	800675c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006752:	893a      	ldrh	r2, [r7, #8]
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fa37 	bl	8006bca <USBH_ParseStringDesc>
  }

  return status;
 800675c:	7dfb      	ldrb	r3, [r7, #23]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	607b      	str	r3, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	72fb      	strb	r3, [r7, #11]
 8006774:	4613      	mov	r3, r2
 8006776:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	789b      	ldrb	r3, [r3, #2]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d11c      	bne.n	80067ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006780:	7afb      	ldrb	r3, [r7, #11]
 8006782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006786:	b2da      	uxtb	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2206      	movs	r2, #6
 8006790:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	893a      	ldrh	r2, [r7, #8]
 8006796:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006798:	893b      	ldrh	r3, [r7, #8]
 800679a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800679e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a2:	d104      	bne.n	80067ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f240 4209 	movw	r2, #1033	; 0x409
 80067aa:	829a      	strh	r2, [r3, #20]
 80067ac:	e002      	b.n	80067b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8b3a      	ldrh	r2, [r7, #24]
 80067b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80067ba:	8b3b      	ldrh	r3, [r7, #24]
 80067bc:	461a      	mov	r2, r3
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fa50 	bl	8006c66 <USBH_CtlReq>
 80067c6:	4603      	mov	r3, r0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	789b      	ldrb	r3, [r3, #2]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d10f      	bne.n	8006804 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2205      	movs	r2, #5
 80067ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006804:	2200      	movs	r2, #0
 8006806:	2100      	movs	r1, #0
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fa2c 	bl	8006c66 <USBH_CtlReq>
 800680e:	4603      	mov	r3, r0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	789b      	ldrb	r3, [r3, #2]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d10e      	bne.n	800684a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2209      	movs	r2, #9
 8006836:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	887a      	ldrh	r2, [r7, #2]
 800683c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800684a:	2200      	movs	r2, #0
 800684c:	2100      	movs	r1, #0
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fa09 	bl	8006c66 <USBH_CtlReq>
 8006854:	4603      	mov	r3, r0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	789b      	ldrb	r3, [r3, #2]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d10f      	bne.n	8006892 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2203      	movs	r2, #3
 800687c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	b29a      	uxth	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006892:	2200      	movs	r2, #0
 8006894:	2100      	movs	r1, #0
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f9e5 	bl	8006c66 <USBH_CtlReq>
 800689c:	4603      	mov	r3, r0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	789b      	ldrb	r3, [r3, #2]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d10f      	bne.n	80068da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2202      	movs	r2, #2
 80068be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80068da:	2200      	movs	r2, #0
 80068dc:	2100      	movs	r1, #0
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f9c1 	bl	8006c66 <USBH_CtlReq>
 80068e4:	4603      	mov	r3, r0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	60f8      	str	r0, [r7, #12]
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	4613      	mov	r3, r2
 80068fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	781a      	ldrb	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	785a      	ldrb	r2, [r3, #1]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	3302      	adds	r3, #2
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	b29a      	uxth	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	3303      	adds	r3, #3
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	021b      	lsls	r3, r3, #8
 800691e:	b29b      	uxth	r3, r3
 8006920:	4313      	orrs	r3, r2
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	791a      	ldrb	r2, [r3, #4]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	795a      	ldrb	r2, [r3, #5]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	799a      	ldrb	r2, [r3, #6]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	79da      	ldrb	r2, [r3, #7]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	2b08      	cmp	r3, #8
 800694c:	d939      	bls.n	80069c2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	3308      	adds	r3, #8
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	b29a      	uxth	r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	3309      	adds	r3, #9
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	b29b      	uxth	r3, r3
 8006962:	4313      	orrs	r3, r2
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	330a      	adds	r3, #10
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	b29a      	uxth	r2, r3
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	330b      	adds	r3, #11
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	b29b      	uxth	r3, r3
 800697e:	4313      	orrs	r3, r2
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	330c      	adds	r3, #12
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	b29a      	uxth	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	330d      	adds	r3, #13
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	b29b      	uxth	r3, r3
 800699a:	4313      	orrs	r3, r2
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	7b9a      	ldrb	r2, [r3, #14]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	7bda      	ldrb	r2, [r3, #15]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	7c1a      	ldrb	r2, [r3, #16]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	7c5a      	ldrb	r2, [r3, #17]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	745a      	strb	r2, [r3, #17]
  }
}
 80069c2:	bf00      	nop
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b08a      	sub	sp, #40	; 0x28
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	4613      	mov	r3, r2
 80069da:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	781a      	ldrb	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	785a      	ldrb	r2, [r3, #1]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	3302      	adds	r3, #2
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	3303      	adds	r3, #3
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	021b      	lsls	r3, r3, #8
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	4313      	orrs	r3, r2
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	791a      	ldrb	r2, [r3, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	795a      	ldrb	r2, [r3, #5]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	799a      	ldrb	r2, [r3, #6]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	79da      	ldrb	r2, [r3, #7]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	7a1a      	ldrb	r2, [r3, #8]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	2b09      	cmp	r3, #9
 8006a48:	d95f      	bls.n	8006b0a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006a4a:	2309      	movs	r3, #9
 8006a4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006a52:	e051      	b.n	8006af8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006a54:	f107 0316 	add.w	r3, r7, #22
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a5c:	f000 f8e8 	bl	8006c30 <USBH_GetNextDesc>
 8006a60:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	785b      	ldrb	r3, [r3, #1]
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d146      	bne.n	8006af8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a6e:	221a      	movs	r2, #26
 8006a70:	fb02 f303 	mul.w	r3, r2, r3
 8006a74:	3308      	adds	r3, #8
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a80:	69f8      	ldr	r0, [r7, #28]
 8006a82:	f000 f846 	bl	8006b12 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006a90:	e022      	b.n	8006ad8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006a92:	f107 0316 	add.w	r3, r7, #22
 8006a96:	4619      	mov	r1, r3
 8006a98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a9a:	f000 f8c9 	bl	8006c30 <USBH_GetNextDesc>
 8006a9e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	785b      	ldrb	r3, [r3, #1]
 8006aa4:	2b05      	cmp	r3, #5
 8006aa6:	d117      	bne.n	8006ad8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006aac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006ab0:	3201      	adds	r2, #1
 8006ab2:	00d2      	lsls	r2, r2, #3
 8006ab4:	211a      	movs	r1, #26
 8006ab6:	fb01 f303 	mul.w	r3, r1, r3
 8006aba:	4413      	add	r3, r2
 8006abc:	3308      	adds	r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ac8:	69b8      	ldr	r0, [r7, #24]
 8006aca:	f000 f851 	bl	8006b70 <USBH_ParseEPDesc>
            ep_ix++;
 8006ace:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	791b      	ldrb	r3, [r3, #4]
 8006adc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d204      	bcs.n	8006aee <USBH_ParseCfgDesc+0x120>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	885a      	ldrh	r2, [r3, #2]
 8006ae8:	8afb      	ldrh	r3, [r7, #22]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d8d1      	bhi.n	8006a92 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006af2:	3301      	adds	r3, #1
 8006af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d804      	bhi.n	8006b0a <USBH_ParseCfgDesc+0x13c>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	885a      	ldrh	r2, [r3, #2]
 8006b04:	8afb      	ldrh	r3, [r7, #22]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d8a4      	bhi.n	8006a54 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006b0a:	bf00      	nop
 8006b0c:	3728      	adds	r7, #40	; 0x28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781a      	ldrb	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	785a      	ldrb	r2, [r3, #1]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	789a      	ldrb	r2, [r3, #2]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	78da      	ldrb	r2, [r3, #3]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	791a      	ldrb	r2, [r3, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	795a      	ldrb	r2, [r3, #5]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	799a      	ldrb	r2, [r3, #6]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	79da      	ldrb	r2, [r3, #7]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	7a1a      	ldrb	r2, [r3, #8]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	721a      	strb	r2, [r3, #8]
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781a      	ldrb	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	785a      	ldrb	r2, [r3, #1]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	789a      	ldrb	r2, [r3, #2]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	78da      	ldrb	r2, [r3, #3]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	3305      	adds	r3, #5
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	021b      	lsls	r3, r3, #8
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	799a      	ldrb	r2, [r3, #6]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	719a      	strb	r2, [r3, #6]
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b087      	sub	sp, #28
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d120      	bne.n	8006c24 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	1e9a      	subs	r2, r3, #2
 8006be8:	88fb      	ldrh	r3, [r7, #6]
 8006bea:	4293      	cmp	r3, r2
 8006bec:	bf28      	it	cs
 8006bee:	4613      	movcs	r3, r2
 8006bf0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3302      	adds	r3, #2
 8006bf6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	82fb      	strh	r3, [r7, #22]
 8006bfc:	e00b      	b.n	8006c16 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006bfe:	8afb      	ldrh	r3, [r7, #22]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	781a      	ldrb	r2, [r3, #0]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006c10:	8afb      	ldrh	r3, [r7, #22]
 8006c12:	3302      	adds	r3, #2
 8006c14:	82fb      	strh	r3, [r7, #22]
 8006c16:	8afa      	ldrh	r2, [r7, #22]
 8006c18:	8abb      	ldrh	r3, [r7, #20]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d3ef      	bcc.n	8006bfe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
  }
}
 8006c24:	bf00      	nop
 8006c26:	371c      	adds	r7, #28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	881a      	ldrh	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	4413      	add	r3, r2
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4413      	add	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006c58:	68fb      	ldr	r3, [r7, #12]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b086      	sub	sp, #24
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	60b9      	str	r1, [r7, #8]
 8006c70:	4613      	mov	r3, r2
 8006c72:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006c74:	2301      	movs	r3, #1
 8006c76:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	789b      	ldrb	r3, [r3, #2]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d002      	beq.n	8006c86 <USBH_CtlReq+0x20>
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d00f      	beq.n	8006ca4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006c84:	e027      	b.n	8006cd6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	88fa      	ldrh	r2, [r7, #6]
 8006c90:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca2:	e018      	b.n	8006cd6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 f81b 	bl	8006ce0 <USBH_HandleControl>
 8006caa:	4603      	mov	r3, r0
 8006cac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <USBH_CtlReq+0x54>
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d106      	bne.n	8006cc8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	761a      	strb	r2, [r3, #24]
      break;
 8006cc6:	e005      	b.n	8006cd4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d102      	bne.n	8006cd4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	709a      	strb	r2, [r3, #2]
      break;
 8006cd4:	bf00      	nop
  }
  return status;
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	7e1b      	ldrb	r3, [r3, #24]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	2b0a      	cmp	r3, #10
 8006cf8:	f200 8158 	bhi.w	8006fac <USBH_HandleControl+0x2cc>
 8006cfc:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <USBH_HandleControl+0x24>)
 8006cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d02:	bf00      	nop
 8006d04:	08006d31 	.word	0x08006d31
 8006d08:	08006d4b 	.word	0x08006d4b
 8006d0c:	08006db5 	.word	0x08006db5
 8006d10:	08006ddb 	.word	0x08006ddb
 8006d14:	08006e13 	.word	0x08006e13
 8006d18:	08006e3f 	.word	0x08006e3f
 8006d1c:	08006e91 	.word	0x08006e91
 8006d20:	08006eb3 	.word	0x08006eb3
 8006d24:	08006eef 	.word	0x08006eef
 8006d28:	08006f17 	.word	0x08006f17
 8006d2c:	08006f55 	.word	0x08006f55
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f103 0110 	add.w	r1, r3, #16
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	795b      	ldrb	r3, [r3, #5]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f945 	bl	8006fcc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	761a      	strb	r2, [r3, #24]
      break;
 8006d48:	e13b      	b.n	8006fc2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	795b      	ldrb	r3, [r3, #5]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fcc5 	bl	80076e0 <USBH_LL_GetURBState>
 8006d56:	4603      	mov	r3, r0
 8006d58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d11e      	bne.n	8006d9e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	7c1b      	ldrb	r3, [r3, #16]
 8006d64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	8adb      	ldrh	r3, [r3, #22]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006d72:	7b7b      	ldrb	r3, [r7, #13]
 8006d74:	2b80      	cmp	r3, #128	; 0x80
 8006d76:	d103      	bne.n	8006d80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006d7e:	e117      	b.n	8006fb0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2205      	movs	r2, #5
 8006d84:	761a      	strb	r2, [r3, #24]
      break;
 8006d86:	e113      	b.n	8006fb0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8006d88:	7b7b      	ldrb	r3, [r7, #13]
 8006d8a:	2b80      	cmp	r3, #128	; 0x80
 8006d8c:	d103      	bne.n	8006d96 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2209      	movs	r2, #9
 8006d92:	761a      	strb	r2, [r3, #24]
      break;
 8006d94:	e10c      	b.n	8006fb0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2207      	movs	r2, #7
 8006d9a:	761a      	strb	r2, [r3, #24]
      break;
 8006d9c:	e108      	b.n	8006fb0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d003      	beq.n	8006dac <USBH_HandleControl+0xcc>
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	f040 8102 	bne.w	8006fb0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	220b      	movs	r2, #11
 8006db0:	761a      	strb	r2, [r3, #24]
      break;
 8006db2:	e0fd      	b.n	8006fb0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6899      	ldr	r1, [r3, #8]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	899a      	ldrh	r2, [r3, #12]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	791b      	ldrb	r3, [r3, #4]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f93c 	bl	800704a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	761a      	strb	r2, [r3, #24]
      break;
 8006dd8:	e0f3      	b.n	8006fc2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	791b      	ldrb	r3, [r3, #4]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fc7d 	bl	80076e0 <USBH_LL_GetURBState>
 8006de6:	4603      	mov	r3, r0
 8006de8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d102      	bne.n	8006df6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2209      	movs	r2, #9
 8006df4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	2b05      	cmp	r3, #5
 8006dfa:	d102      	bne.n	8006e02 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006e00:	e0d8      	b.n	8006fb4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	f040 80d5 	bne.w	8006fb4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	220b      	movs	r2, #11
 8006e0e:	761a      	strb	r2, [r3, #24]
      break;
 8006e10:	e0d0      	b.n	8006fb4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6899      	ldr	r1, [r3, #8]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	899a      	ldrh	r2, [r3, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7958      	ldrb	r0, [r3, #5]
 8006e1e:	2301      	movs	r3, #1
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	4603      	mov	r3, r0
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f8eb 	bl	8007000 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2206      	movs	r2, #6
 8006e3a:	761a      	strb	r2, [r3, #24]
      break;
 8006e3c:	e0c1      	b.n	8006fc2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	795b      	ldrb	r3, [r3, #5]
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fc4b 	bl	80076e0 <USBH_LL_GetURBState>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d103      	bne.n	8006e5c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2207      	movs	r2, #7
 8006e58:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006e5a:	e0ad      	b.n	8006fb8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	2b05      	cmp	r3, #5
 8006e60:	d105      	bne.n	8006e6e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	220c      	movs	r2, #12
 8006e66:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6c:	e0a4      	b.n	8006fb8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d103      	bne.n	8006e7c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2205      	movs	r2, #5
 8006e78:	761a      	strb	r2, [r3, #24]
      break;
 8006e7a:	e09d      	b.n	8006fb8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8006e7c:	7bbb      	ldrb	r3, [r7, #14]
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	f040 809a 	bne.w	8006fb8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	220b      	movs	r2, #11
 8006e88:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e8e:	e093      	b.n	8006fb8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	791b      	ldrb	r3, [r3, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	2100      	movs	r1, #0
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f8d6 	bl	800704a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2208      	movs	r2, #8
 8006eae:	761a      	strb	r2, [r3, #24]

      break;
 8006eb0:	e087      	b.n	8006fc2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	791b      	ldrb	r3, [r3, #4]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fc11 	bl	80076e0 <USBH_LL_GetURBState>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006ec2:	7bbb      	ldrb	r3, [r7, #14]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d105      	bne.n	8006ed4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	220d      	movs	r2, #13
 8006ecc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006ed2:	e073      	b.n	8006fbc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d103      	bne.n	8006ee2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	220b      	movs	r2, #11
 8006ede:	761a      	strb	r2, [r3, #24]
      break;
 8006ee0:	e06c      	b.n	8006fbc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b05      	cmp	r3, #5
 8006ee6:	d169      	bne.n	8006fbc <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	73fb      	strb	r3, [r7, #15]
      break;
 8006eec:	e066      	b.n	8006fbc <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	795a      	ldrb	r2, [r3, #5]
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2100      	movs	r1, #0
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f87f 	bl	8007000 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	220a      	movs	r2, #10
 8006f12:	761a      	strb	r2, [r3, #24]
      break;
 8006f14:	e055      	b.n	8006fc2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	795b      	ldrb	r3, [r3, #5]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fbdf 	bl	80076e0 <USBH_LL_GetURBState>
 8006f22:	4603      	mov	r3, r0
 8006f24:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d105      	bne.n	8006f38 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	220d      	movs	r2, #13
 8006f34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f36:	e043      	b.n	8006fc0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d103      	bne.n	8006f46 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2209      	movs	r2, #9
 8006f42:	761a      	strb	r2, [r3, #24]
      break;
 8006f44:	e03c      	b.n	8006fc0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d139      	bne.n	8006fc0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	220b      	movs	r2, #11
 8006f50:	761a      	strb	r2, [r3, #24]
      break;
 8006f52:	e035      	b.n	8006fc0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	7e5b      	ldrb	r3, [r3, #25]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	765a      	strb	r2, [r3, #25]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	7e5b      	ldrb	r3, [r3, #25]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d806      	bhi.n	8006f76 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006f74:	e025      	b.n	8006fc2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f7c:	2106      	movs	r1, #6
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	795b      	ldrb	r3, [r3, #5]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f90c 	bl	80071ac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	791b      	ldrb	r3, [r3, #4]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f906 	bl	80071ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8006faa:	e00a      	b.n	8006fc2 <USBH_HandleControl+0x2e2>

    default:
      break;
 8006fac:	bf00      	nop
 8006fae:	e008      	b.n	8006fc2 <USBH_HandleControl+0x2e2>
      break;
 8006fb0:	bf00      	nop
 8006fb2:	e006      	b.n	8006fc2 <USBH_HandleControl+0x2e2>
      break;
 8006fb4:	bf00      	nop
 8006fb6:	e004      	b.n	8006fc2 <USBH_HandleControl+0x2e2>
      break;
 8006fb8:	bf00      	nop
 8006fba:	e002      	b.n	8006fc2 <USBH_HandleControl+0x2e2>
      break;
 8006fbc:	bf00      	nop
 8006fbe:	e000      	b.n	8006fc2 <USBH_HandleControl+0x2e2>
      break;
 8006fc0:	bf00      	nop
  }

  return status;
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b088      	sub	sp, #32
 8006fd0:	af04      	add	r7, sp, #16
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006fda:	79f9      	ldrb	r1, [r7, #7]
 8006fdc:	2300      	movs	r3, #0
 8006fde:	9303      	str	r3, [sp, #12]
 8006fe0:	2308      	movs	r3, #8
 8006fe2:	9302      	str	r3, [sp, #8]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	2300      	movs	r3, #0
 8006fee:	2200      	movs	r2, #0
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 fb44 	bl	800767e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af04      	add	r7, sp, #16
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4611      	mov	r1, r2
 800700c:	461a      	mov	r2, r3
 800700e:	460b      	mov	r3, r1
 8007010:	80fb      	strh	r3, [r7, #6]
 8007012:	4613      	mov	r3, r2
 8007014:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007024:	7979      	ldrb	r1, [r7, #5]
 8007026:	7e3b      	ldrb	r3, [r7, #24]
 8007028:	9303      	str	r3, [sp, #12]
 800702a:	88fb      	ldrh	r3, [r7, #6]
 800702c:	9302      	str	r3, [sp, #8]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	2301      	movs	r3, #1
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	2300      	movs	r3, #0
 8007038:	2200      	movs	r2, #0
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fb1f 	bl	800767e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b088      	sub	sp, #32
 800704e:	af04      	add	r7, sp, #16
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	4611      	mov	r1, r2
 8007056:	461a      	mov	r2, r3
 8007058:	460b      	mov	r3, r1
 800705a:	80fb      	strh	r3, [r7, #6]
 800705c:	4613      	mov	r3, r2
 800705e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007060:	7979      	ldrb	r1, [r7, #5]
 8007062:	2300      	movs	r3, #0
 8007064:	9303      	str	r3, [sp, #12]
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	9302      	str	r3, [sp, #8]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	9301      	str	r3, [sp, #4]
 800706e:	2301      	movs	r3, #1
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	2300      	movs	r3, #0
 8007074:	2201      	movs	r2, #1
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fb01 	bl	800767e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800707c:	2300      	movs	r3, #0

}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b088      	sub	sp, #32
 800708a:	af04      	add	r7, sp, #16
 800708c:	60f8      	str	r0, [r7, #12]
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	4611      	mov	r1, r2
 8007092:	461a      	mov	r2, r3
 8007094:	460b      	mov	r3, r1
 8007096:	80fb      	strh	r3, [r7, #6]
 8007098:	4613      	mov	r3, r2
 800709a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80070aa:	7979      	ldrb	r1, [r7, #5]
 80070ac:	7e3b      	ldrb	r3, [r7, #24]
 80070ae:	9303      	str	r3, [sp, #12]
 80070b0:	88fb      	ldrh	r3, [r7, #6]
 80070b2:	9302      	str	r3, [sp, #8]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	2301      	movs	r3, #1
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	2302      	movs	r3, #2
 80070be:	2200      	movs	r2, #0
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 fadc 	bl	800767e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af04      	add	r7, sp, #16
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	4611      	mov	r1, r2
 80070dc:	461a      	mov	r2, r3
 80070de:	460b      	mov	r3, r1
 80070e0:	80fb      	strh	r3, [r7, #6]
 80070e2:	4613      	mov	r3, r2
 80070e4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80070e6:	7979      	ldrb	r1, [r7, #5]
 80070e8:	2300      	movs	r3, #0
 80070ea:	9303      	str	r3, [sp, #12]
 80070ec:	88fb      	ldrh	r3, [r7, #6]
 80070ee:	9302      	str	r3, [sp, #8]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	2301      	movs	r3, #1
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	2302      	movs	r3, #2
 80070fa:	2201      	movs	r2, #1
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 fabe 	bl	800767e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af04      	add	r7, sp, #16
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	4608      	mov	r0, r1
 8007116:	4611      	mov	r1, r2
 8007118:	461a      	mov	r2, r3
 800711a:	4603      	mov	r3, r0
 800711c:	70fb      	strb	r3, [r7, #3]
 800711e:	460b      	mov	r3, r1
 8007120:	70bb      	strb	r3, [r7, #2]
 8007122:	4613      	mov	r3, r2
 8007124:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007126:	7878      	ldrb	r0, [r7, #1]
 8007128:	78ba      	ldrb	r2, [r7, #2]
 800712a:	78f9      	ldrb	r1, [r7, #3]
 800712c:	8b3b      	ldrh	r3, [r7, #24]
 800712e:	9302      	str	r3, [sp, #8]
 8007130:	7d3b      	ldrb	r3, [r7, #20]
 8007132:	9301      	str	r3, [sp, #4]
 8007134:	7c3b      	ldrb	r3, [r7, #16]
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	4603      	mov	r3, r0
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa51 	bl	80075e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fa70 	bl	8007640 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	460b      	mov	r3, r1
 8007174:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f836 	bl	80071e8 <USBH_GetFreePipe>
 800717c:	4603      	mov	r3, r0
 800717e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007180:	89fb      	ldrh	r3, [r7, #14]
 8007182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007186:	4293      	cmp	r3, r2
 8007188:	d00a      	beq.n	80071a0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800718a:	78fa      	ldrb	r2, [r7, #3]
 800718c:	89fb      	ldrh	r3, [r7, #14]
 800718e:	f003 030f 	and.w	r3, r3, #15
 8007192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	33e0      	adds	r3, #224	; 0xe0
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80071a0:	89fb      	ldrh	r3, [r7, #14]
 80071a2:	b2db      	uxtb	r3, r3
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80071b8:	78fb      	ldrb	r3, [r7, #3]
 80071ba:	2b0a      	cmp	r3, #10
 80071bc:	d80d      	bhi.n	80071da <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	33e0      	adds	r3, #224	; 0xe0
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	33e0      	adds	r3, #224	; 0xe0
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	440b      	add	r3, r1
 80071d8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80071f4:	2300      	movs	r3, #0
 80071f6:	73fb      	strb	r3, [r7, #15]
 80071f8:	e00f      	b.n	800721a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	33e0      	adds	r3, #224	; 0xe0
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d102      	bne.n	8007214 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	b29b      	uxth	r3, r3
 8007212:	e007      	b.n	8007224 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	3301      	adds	r3, #1
 8007218:	73fb      	strb	r3, [r7, #15]
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	2b0a      	cmp	r3, #10
 800721e:	d9ec      	bls.n	80071fa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007220:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007234:	2201      	movs	r2, #1
 8007236:	490e      	ldr	r1, [pc, #56]	; (8007270 <MX_USB_HOST_Init+0x40>)
 8007238:	480e      	ldr	r0, [pc, #56]	; (8007274 <MX_USB_HOST_Init+0x44>)
 800723a:	f7fe fc9f 	bl	8005b7c <USBH_Init>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007244:	f7f9 fb3c 	bl	80008c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007248:	490b      	ldr	r1, [pc, #44]	; (8007278 <MX_USB_HOST_Init+0x48>)
 800724a:	480a      	ldr	r0, [pc, #40]	; (8007274 <MX_USB_HOST_Init+0x44>)
 800724c:	f7fe fd24 	bl	8005c98 <USBH_RegisterClass>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007256:	f7f9 fb33 	bl	80008c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800725a:	4806      	ldr	r0, [pc, #24]	; (8007274 <MX_USB_HOST_Init+0x44>)
 800725c:	f7fe fda8 	bl	8005db0 <USBH_Start>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007266:	f7f9 fb2b 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800726a:	bf00      	nop
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	08007291 	.word	0x08007291
 8007274:	20000120 	.word	0x20000120
 8007278:	2000000c 	.word	0x2000000c

0800727c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007280:	4802      	ldr	r0, [pc, #8]	; (800728c <MX_USB_HOST_Process+0x10>)
 8007282:	f7fe fda5 	bl	8005dd0 <USBH_Process>
}
 8007286:	bf00      	nop
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000120 	.word	0x20000120

08007290 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	3b01      	subs	r3, #1
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d819      	bhi.n	80072d8 <USBH_UserProcess+0x48>
 80072a4:	a201      	add	r2, pc, #4	; (adr r2, 80072ac <USBH_UserProcess+0x1c>)
 80072a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072aa:	bf00      	nop
 80072ac:	080072d9 	.word	0x080072d9
 80072b0:	080072c9 	.word	0x080072c9
 80072b4:	080072d9 	.word	0x080072d9
 80072b8:	080072d1 	.word	0x080072d1
 80072bc:	080072c1 	.word	0x080072c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80072c0:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <USBH_UserProcess+0x58>)
 80072c2:	2203      	movs	r2, #3
 80072c4:	701a      	strb	r2, [r3, #0]
  break;
 80072c6:	e008      	b.n	80072da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80072c8:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <USBH_UserProcess+0x58>)
 80072ca:	2202      	movs	r2, #2
 80072cc:	701a      	strb	r2, [r3, #0]
  break;
 80072ce:	e004      	b.n	80072da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80072d0:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <USBH_UserProcess+0x58>)
 80072d2:	2201      	movs	r2, #1
 80072d4:	701a      	strb	r2, [r3, #0]
  break;
 80072d6:	e000      	b.n	80072da <USBH_UserProcess+0x4a>

  default:
  break;
 80072d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	200000b4 	.word	0x200000b4

080072ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072f4:	f107 0314 	add.w	r3, r7, #20
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	605a      	str	r2, [r3, #4]
 80072fe:	609a      	str	r2, [r3, #8]
 8007300:	60da      	str	r2, [r3, #12]
 8007302:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800730c:	d147      	bne.n	800739e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800730e:	2300      	movs	r3, #0
 8007310:	613b      	str	r3, [r7, #16]
 8007312:	4b25      	ldr	r3, [pc, #148]	; (80073a8 <HAL_HCD_MspInit+0xbc>)
 8007314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007316:	4a24      	ldr	r2, [pc, #144]	; (80073a8 <HAL_HCD_MspInit+0xbc>)
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	6313      	str	r3, [r2, #48]	; 0x30
 800731e:	4b22      	ldr	r3, [pc, #136]	; (80073a8 <HAL_HCD_MspInit+0xbc>)
 8007320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800732a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800732e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007330:	2300      	movs	r3, #0
 8007332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007334:	2300      	movs	r3, #0
 8007336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007338:	f107 0314 	add.w	r3, r7, #20
 800733c:	4619      	mov	r1, r3
 800733e:	481b      	ldr	r0, [pc, #108]	; (80073ac <HAL_HCD_MspInit+0xc0>)
 8007340:	f7f9 fd92 	bl	8000e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007344:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800734a:	2302      	movs	r3, #2
 800734c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800734e:	2300      	movs	r3, #0
 8007350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007352:	2300      	movs	r3, #0
 8007354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007356:	230a      	movs	r3, #10
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800735a:	f107 0314 	add.w	r3, r7, #20
 800735e:	4619      	mov	r1, r3
 8007360:	4812      	ldr	r0, [pc, #72]	; (80073ac <HAL_HCD_MspInit+0xc0>)
 8007362:	f7f9 fd81 	bl	8000e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007366:	4b10      	ldr	r3, [pc, #64]	; (80073a8 <HAL_HCD_MspInit+0xbc>)
 8007368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736a:	4a0f      	ldr	r2, [pc, #60]	; (80073a8 <HAL_HCD_MspInit+0xbc>)
 800736c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007370:	6353      	str	r3, [r2, #52]	; 0x34
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <HAL_HCD_MspInit+0xbc>)
 8007378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737a:	4a0b      	ldr	r2, [pc, #44]	; (80073a8 <HAL_HCD_MspInit+0xbc>)
 800737c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007380:	6453      	str	r3, [r2, #68]	; 0x44
 8007382:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <HAL_HCD_MspInit+0xbc>)
 8007384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800738e:	2200      	movs	r2, #0
 8007390:	2100      	movs	r1, #0
 8007392:	2043      	movs	r0, #67	; 0x43
 8007394:	f7f9 fd31 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007398:	2043      	movs	r0, #67	; 0x43
 800739a:	f7f9 fd4a 	bl	8000e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800739e:	bf00      	nop
 80073a0:	3728      	adds	r7, #40	; 0x28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	40023800 	.word	0x40023800
 80073ac:	40020000 	.word	0x40020000

080073b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff f8d9 	bl	8006576 <USBH_LL_IncTimer>
}
 80073c4:	bf00      	nop
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff f911 	bl	8006602 <USBH_LL_Connect>
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff f91a 	bl	8006630 <USBH_LL_Disconnect>
}
 80073fc:	bf00      	nop
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
 8007410:	4613      	mov	r3, r2
 8007412:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff f8cb 	bl	80065ca <USBH_LL_PortEnabled>
} 
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff f8cb 	bl	80065e6 <USBH_LL_PortDisabled>
} 
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007466:	2b01      	cmp	r3, #1
 8007468:	d12a      	bne.n	80074c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800746a:	4a18      	ldr	r2, [pc, #96]	; (80074cc <USBH_LL_Init+0x74>)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a15      	ldr	r2, [pc, #84]	; (80074cc <USBH_LL_Init+0x74>)
 8007476:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800747a:	4b14      	ldr	r3, [pc, #80]	; (80074cc <USBH_LL_Init+0x74>)
 800747c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007480:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007482:	4b12      	ldr	r3, [pc, #72]	; (80074cc <USBH_LL_Init+0x74>)
 8007484:	2208      	movs	r2, #8
 8007486:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007488:	4b10      	ldr	r3, [pc, #64]	; (80074cc <USBH_LL_Init+0x74>)
 800748a:	2201      	movs	r2, #1
 800748c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800748e:	4b0f      	ldr	r3, [pc, #60]	; (80074cc <USBH_LL_Init+0x74>)
 8007490:	2200      	movs	r2, #0
 8007492:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007494:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <USBH_LL_Init+0x74>)
 8007496:	2202      	movs	r2, #2
 8007498:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800749a:	4b0c      	ldr	r3, [pc, #48]	; (80074cc <USBH_LL_Init+0x74>)
 800749c:	2200      	movs	r2, #0
 800749e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80074a0:	480a      	ldr	r0, [pc, #40]	; (80074cc <USBH_LL_Init+0x74>)
 80074a2:	f7f9 feaf 	bl	8001204 <HAL_HCD_Init>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80074ac:	f7f9 fa08 	bl	80008c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80074b0:	4806      	ldr	r0, [pc, #24]	; (80074cc <USBH_LL_Init+0x74>)
 80074b2:	f7fa fab3 	bl	8001a1c <HAL_HCD_GetCurrentFrame>
 80074b6:	4603      	mov	r3, r0
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7ff f84c 	bl	8006558 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	200004f8 	.word	0x200004f8

080074d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fa fa20 	bl	800192c <HAL_HCD_Start>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 f95c 	bl	80077b0 <USBH_Get_USB_Status>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800751c:	4618      	mov	r0, r3
 800751e:	f7fa fa28 	bl	8001972 <HAL_HCD_Stop>
 8007522:	4603      	mov	r3, r0
 8007524:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	4618      	mov	r0, r3
 800752a:	f000 f941 	bl	80077b0 <USBH_Get_USB_Status>
 800752e:	4603      	mov	r3, r0
 8007530:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007532:	7bbb      	ldrb	r3, [r7, #14]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007544:	2301      	movs	r3, #1
 8007546:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800754e:	4618      	mov	r0, r3
 8007550:	f7fa fa72 	bl	8001a38 <HAL_HCD_GetCurrentSpeed>
 8007554:	4603      	mov	r3, r0
 8007556:	2b01      	cmp	r3, #1
 8007558:	d007      	beq.n	800756a <USBH_LL_GetSpeed+0x2e>
 800755a:	2b01      	cmp	r3, #1
 800755c:	d302      	bcc.n	8007564 <USBH_LL_GetSpeed+0x28>
 800755e:	2b02      	cmp	r3, #2
 8007560:	d006      	beq.n	8007570 <USBH_LL_GetSpeed+0x34>
 8007562:	e008      	b.n	8007576 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]
    break;
 8007568:	e008      	b.n	800757c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800756a:	2301      	movs	r3, #1
 800756c:	73fb      	strb	r3, [r7, #15]
    break;
 800756e:	e005      	b.n	800757c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007570:	2302      	movs	r3, #2
 8007572:	73fb      	strb	r3, [r7, #15]
    break;
 8007574:	e002      	b.n	800757c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007576:	2301      	movs	r3, #1
 8007578:	73fb      	strb	r3, [r7, #15]
    break;
 800757a:	bf00      	nop
  }
  return  speed;
 800757c:	7bfb      	ldrb	r3, [r7, #15]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800759c:	4618      	mov	r0, r3
 800759e:	f7fa fa05 	bl	80019ac <HAL_HCD_ResetPort>
 80075a2:	4603      	mov	r3, r0
 80075a4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 f901 	bl	80077b0 <USBH_Get_USB_Status>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80075ce:	78fa      	ldrb	r2, [r7, #3]
 80075d0:	4611      	mov	r1, r2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fa fa0d 	bl	80019f2 <HAL_HCD_HC_GetXferCount>
 80075d8:	4603      	mov	r3, r0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80075e2:	b590      	push	{r4, r7, lr}
 80075e4:	b089      	sub	sp, #36	; 0x24
 80075e6:	af04      	add	r7, sp, #16
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	4608      	mov	r0, r1
 80075ec:	4611      	mov	r1, r2
 80075ee:	461a      	mov	r2, r3
 80075f0:	4603      	mov	r3, r0
 80075f2:	70fb      	strb	r3, [r7, #3]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70bb      	strb	r3, [r7, #2]
 80075f8:	4613      	mov	r3, r2
 80075fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800760a:	787c      	ldrb	r4, [r7, #1]
 800760c:	78ba      	ldrb	r2, [r7, #2]
 800760e:	78f9      	ldrb	r1, [r7, #3]
 8007610:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007612:	9302      	str	r3, [sp, #8]
 8007614:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	4623      	mov	r3, r4
 8007622:	f7f9 fe51 	bl	80012c8 <HAL_HCD_HC_Init>
 8007626:	4603      	mov	r3, r0
 8007628:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 f8bf 	bl	80077b0 <USBH_Get_USB_Status>
 8007632:	4603      	mov	r3, r0
 8007634:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007636:	7bbb      	ldrb	r3, [r7, #14]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	bd90      	pop	{r4, r7, pc}

08007640 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800765a:	78fa      	ldrb	r2, [r7, #3]
 800765c:	4611      	mov	r1, r2
 800765e:	4618      	mov	r0, r3
 8007660:	f7f9 feca 	bl	80013f8 <HAL_HCD_HC_Halt>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f8a0 	bl	80077b0 <USBH_Get_USB_Status>
 8007670:	4603      	mov	r3, r0
 8007672:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007674:	7bbb      	ldrb	r3, [r7, #14]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800767e:	b590      	push	{r4, r7, lr}
 8007680:	b089      	sub	sp, #36	; 0x24
 8007682:	af04      	add	r7, sp, #16
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	4608      	mov	r0, r1
 8007688:	4611      	mov	r1, r2
 800768a:	461a      	mov	r2, r3
 800768c:	4603      	mov	r3, r0
 800768e:	70fb      	strb	r3, [r7, #3]
 8007690:	460b      	mov	r3, r1
 8007692:	70bb      	strb	r3, [r7, #2]
 8007694:	4613      	mov	r3, r2
 8007696:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80076a6:	787c      	ldrb	r4, [r7, #1]
 80076a8:	78ba      	ldrb	r2, [r7, #2]
 80076aa:	78f9      	ldrb	r1, [r7, #3]
 80076ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076b0:	9303      	str	r3, [sp, #12]
 80076b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80076b4:	9302      	str	r3, [sp, #8]
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	4623      	mov	r3, r4
 80076c2:	f7f9 febd 	bl	8001440 <HAL_HCD_HC_SubmitRequest>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 f86f 	bl	80077b0 <USBH_Get_USB_Status>
 80076d2:	4603      	mov	r3, r0
 80076d4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd90      	pop	{r4, r7, pc}

080076e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076f2:	78fa      	ldrb	r2, [r7, #3]
 80076f4:	4611      	mov	r1, r2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fa f966 	bl	80019c8 <HAL_HCD_HC_GetURBState>
 80076fc:	4603      	mov	r3, r0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007718:	2b01      	cmp	r3, #1
 800771a:	d103      	bne.n	8007724 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	4618      	mov	r0, r3
 8007720:	f000 f872 	bl	8007808 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007724:	20c8      	movs	r0, #200	; 0xc8
 8007726:	f7f9 fa6b 	bl	8000c00 <HAL_Delay>
  return USBH_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
 8007740:	4613      	mov	r3, r2
 8007742:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800774a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800774c:	78fa      	ldrb	r2, [r7, #3]
 800774e:	68f9      	ldr	r1, [r7, #12]
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	440b      	add	r3, r1
 800775a:	333b      	adds	r3, #59	; 0x3b
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007762:	78fa      	ldrb	r2, [r7, #3]
 8007764:	68f9      	ldr	r1, [r7, #12]
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	00db      	lsls	r3, r3, #3
 800776e:	440b      	add	r3, r1
 8007770:	3350      	adds	r3, #80	; 0x50
 8007772:	78ba      	ldrb	r2, [r7, #2]
 8007774:	701a      	strb	r2, [r3, #0]
 8007776:	e009      	b.n	800778c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007778:	78fa      	ldrb	r2, [r7, #3]
 800777a:	68f9      	ldr	r1, [r7, #12]
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	440b      	add	r3, r1
 8007786:	3351      	adds	r3, #81	; 0x51
 8007788:	78ba      	ldrb	r2, [r7, #2]
 800778a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b082      	sub	sp, #8
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7f9 fa2c 	bl	8000c00 <HAL_Delay>
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d817      	bhi.n	80077f4 <USBH_Get_USB_Status+0x44>
 80077c4:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <USBH_Get_USB_Status+0x1c>)
 80077c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ca:	bf00      	nop
 80077cc:	080077dd 	.word	0x080077dd
 80077d0:	080077e3 	.word	0x080077e3
 80077d4:	080077e9 	.word	0x080077e9
 80077d8:	080077ef 	.word	0x080077ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80077dc:	2300      	movs	r3, #0
 80077de:	73fb      	strb	r3, [r7, #15]
    break;
 80077e0:	e00b      	b.n	80077fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80077e2:	2302      	movs	r3, #2
 80077e4:	73fb      	strb	r3, [r7, #15]
    break;
 80077e6:	e008      	b.n	80077fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80077e8:	2301      	movs	r3, #1
 80077ea:	73fb      	strb	r3, [r7, #15]
    break;
 80077ec:	e005      	b.n	80077fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80077ee:	2302      	movs	r3, #2
 80077f0:	73fb      	strb	r3, [r7, #15]
    break;
 80077f2:	e002      	b.n	80077fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80077f4:	2302      	movs	r3, #2
 80077f6:	73fb      	strb	r3, [r7, #15]
    break;
 80077f8:	bf00      	nop
  }
  return usb_status;
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	4603      	mov	r3, r0
 8007810:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007816:	79fb      	ldrb	r3, [r7, #7]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800781c:	2301      	movs	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]
 8007820:	e001      	b.n	8007826 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007822:	2300      	movs	r3, #0
 8007824:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	461a      	mov	r2, r3
 800782a:	2101      	movs	r1, #1
 800782c:	4803      	ldr	r0, [pc, #12]	; (800783c <MX_DriverVbusFS+0x34>)
 800782e:	f7f9 fcb5 	bl	800119c <HAL_GPIO_WritePin>
}
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	40020800 	.word	0x40020800

08007840 <__errno>:
 8007840:	4b01      	ldr	r3, [pc, #4]	; (8007848 <__errno+0x8>)
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	2000002c 	.word	0x2000002c

0800784c <__libc_init_array>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	4e0d      	ldr	r6, [pc, #52]	; (8007884 <__libc_init_array+0x38>)
 8007850:	4c0d      	ldr	r4, [pc, #52]	; (8007888 <__libc_init_array+0x3c>)
 8007852:	1ba4      	subs	r4, r4, r6
 8007854:	10a4      	asrs	r4, r4, #2
 8007856:	2500      	movs	r5, #0
 8007858:	42a5      	cmp	r5, r4
 800785a:	d109      	bne.n	8007870 <__libc_init_array+0x24>
 800785c:	4e0b      	ldr	r6, [pc, #44]	; (800788c <__libc_init_array+0x40>)
 800785e:	4c0c      	ldr	r4, [pc, #48]	; (8007890 <__libc_init_array+0x44>)
 8007860:	f000 f8ea 	bl	8007a38 <_init>
 8007864:	1ba4      	subs	r4, r4, r6
 8007866:	10a4      	asrs	r4, r4, #2
 8007868:	2500      	movs	r5, #0
 800786a:	42a5      	cmp	r5, r4
 800786c:	d105      	bne.n	800787a <__libc_init_array+0x2e>
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007874:	4798      	blx	r3
 8007876:	3501      	adds	r5, #1
 8007878:	e7ee      	b.n	8007858 <__libc_init_array+0xc>
 800787a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800787e:	4798      	blx	r3
 8007880:	3501      	adds	r5, #1
 8007882:	e7f2      	b.n	800786a <__libc_init_array+0x1e>
 8007884:	08007a74 	.word	0x08007a74
 8007888:	08007a74 	.word	0x08007a74
 800788c:	08007a74 	.word	0x08007a74
 8007890:	08007a78 	.word	0x08007a78

08007894 <malloc>:
 8007894:	4b02      	ldr	r3, [pc, #8]	; (80078a0 <malloc+0xc>)
 8007896:	4601      	mov	r1, r0
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	f000 b861 	b.w	8007960 <_malloc_r>
 800789e:	bf00      	nop
 80078a0:	2000002c 	.word	0x2000002c

080078a4 <free>:
 80078a4:	4b02      	ldr	r3, [pc, #8]	; (80078b0 <free+0xc>)
 80078a6:	4601      	mov	r1, r0
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	f000 b80b 	b.w	80078c4 <_free_r>
 80078ae:	bf00      	nop
 80078b0:	2000002c 	.word	0x2000002c

080078b4 <memset>:
 80078b4:	4402      	add	r2, r0
 80078b6:	4603      	mov	r3, r0
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d100      	bne.n	80078be <memset+0xa>
 80078bc:	4770      	bx	lr
 80078be:	f803 1b01 	strb.w	r1, [r3], #1
 80078c2:	e7f9      	b.n	80078b8 <memset+0x4>

080078c4 <_free_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4605      	mov	r5, r0
 80078c8:	2900      	cmp	r1, #0
 80078ca:	d045      	beq.n	8007958 <_free_r+0x94>
 80078cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078d0:	1f0c      	subs	r4, r1, #4
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	bfb8      	it	lt
 80078d6:	18e4      	addlt	r4, r4, r3
 80078d8:	f000 f8ac 	bl	8007a34 <__malloc_lock>
 80078dc:	4a1f      	ldr	r2, [pc, #124]	; (800795c <_free_r+0x98>)
 80078de:	6813      	ldr	r3, [r2, #0]
 80078e0:	4610      	mov	r0, r2
 80078e2:	b933      	cbnz	r3, 80078f2 <_free_r+0x2e>
 80078e4:	6063      	str	r3, [r4, #4]
 80078e6:	6014      	str	r4, [r2, #0]
 80078e8:	4628      	mov	r0, r5
 80078ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078ee:	f000 b8a2 	b.w	8007a36 <__malloc_unlock>
 80078f2:	42a3      	cmp	r3, r4
 80078f4:	d90c      	bls.n	8007910 <_free_r+0x4c>
 80078f6:	6821      	ldr	r1, [r4, #0]
 80078f8:	1862      	adds	r2, r4, r1
 80078fa:	4293      	cmp	r3, r2
 80078fc:	bf04      	itt	eq
 80078fe:	681a      	ldreq	r2, [r3, #0]
 8007900:	685b      	ldreq	r3, [r3, #4]
 8007902:	6063      	str	r3, [r4, #4]
 8007904:	bf04      	itt	eq
 8007906:	1852      	addeq	r2, r2, r1
 8007908:	6022      	streq	r2, [r4, #0]
 800790a:	6004      	str	r4, [r0, #0]
 800790c:	e7ec      	b.n	80078e8 <_free_r+0x24>
 800790e:	4613      	mov	r3, r2
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	b10a      	cbz	r2, 8007918 <_free_r+0x54>
 8007914:	42a2      	cmp	r2, r4
 8007916:	d9fa      	bls.n	800790e <_free_r+0x4a>
 8007918:	6819      	ldr	r1, [r3, #0]
 800791a:	1858      	adds	r0, r3, r1
 800791c:	42a0      	cmp	r0, r4
 800791e:	d10b      	bne.n	8007938 <_free_r+0x74>
 8007920:	6820      	ldr	r0, [r4, #0]
 8007922:	4401      	add	r1, r0
 8007924:	1858      	adds	r0, r3, r1
 8007926:	4282      	cmp	r2, r0
 8007928:	6019      	str	r1, [r3, #0]
 800792a:	d1dd      	bne.n	80078e8 <_free_r+0x24>
 800792c:	6810      	ldr	r0, [r2, #0]
 800792e:	6852      	ldr	r2, [r2, #4]
 8007930:	605a      	str	r2, [r3, #4]
 8007932:	4401      	add	r1, r0
 8007934:	6019      	str	r1, [r3, #0]
 8007936:	e7d7      	b.n	80078e8 <_free_r+0x24>
 8007938:	d902      	bls.n	8007940 <_free_r+0x7c>
 800793a:	230c      	movs	r3, #12
 800793c:	602b      	str	r3, [r5, #0]
 800793e:	e7d3      	b.n	80078e8 <_free_r+0x24>
 8007940:	6820      	ldr	r0, [r4, #0]
 8007942:	1821      	adds	r1, r4, r0
 8007944:	428a      	cmp	r2, r1
 8007946:	bf04      	itt	eq
 8007948:	6811      	ldreq	r1, [r2, #0]
 800794a:	6852      	ldreq	r2, [r2, #4]
 800794c:	6062      	str	r2, [r4, #4]
 800794e:	bf04      	itt	eq
 8007950:	1809      	addeq	r1, r1, r0
 8007952:	6021      	streq	r1, [r4, #0]
 8007954:	605c      	str	r4, [r3, #4]
 8007956:	e7c7      	b.n	80078e8 <_free_r+0x24>
 8007958:	bd38      	pop	{r3, r4, r5, pc}
 800795a:	bf00      	nop
 800795c:	200000b8 	.word	0x200000b8

08007960 <_malloc_r>:
 8007960:	b570      	push	{r4, r5, r6, lr}
 8007962:	1ccd      	adds	r5, r1, #3
 8007964:	f025 0503 	bic.w	r5, r5, #3
 8007968:	3508      	adds	r5, #8
 800796a:	2d0c      	cmp	r5, #12
 800796c:	bf38      	it	cc
 800796e:	250c      	movcc	r5, #12
 8007970:	2d00      	cmp	r5, #0
 8007972:	4606      	mov	r6, r0
 8007974:	db01      	blt.n	800797a <_malloc_r+0x1a>
 8007976:	42a9      	cmp	r1, r5
 8007978:	d903      	bls.n	8007982 <_malloc_r+0x22>
 800797a:	230c      	movs	r3, #12
 800797c:	6033      	str	r3, [r6, #0]
 800797e:	2000      	movs	r0, #0
 8007980:	bd70      	pop	{r4, r5, r6, pc}
 8007982:	f000 f857 	bl	8007a34 <__malloc_lock>
 8007986:	4a21      	ldr	r2, [pc, #132]	; (8007a0c <_malloc_r+0xac>)
 8007988:	6814      	ldr	r4, [r2, #0]
 800798a:	4621      	mov	r1, r4
 800798c:	b991      	cbnz	r1, 80079b4 <_malloc_r+0x54>
 800798e:	4c20      	ldr	r4, [pc, #128]	; (8007a10 <_malloc_r+0xb0>)
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	b91b      	cbnz	r3, 800799c <_malloc_r+0x3c>
 8007994:	4630      	mov	r0, r6
 8007996:	f000 f83d 	bl	8007a14 <_sbrk_r>
 800799a:	6020      	str	r0, [r4, #0]
 800799c:	4629      	mov	r1, r5
 800799e:	4630      	mov	r0, r6
 80079a0:	f000 f838 	bl	8007a14 <_sbrk_r>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d124      	bne.n	80079f2 <_malloc_r+0x92>
 80079a8:	230c      	movs	r3, #12
 80079aa:	6033      	str	r3, [r6, #0]
 80079ac:	4630      	mov	r0, r6
 80079ae:	f000 f842 	bl	8007a36 <__malloc_unlock>
 80079b2:	e7e4      	b.n	800797e <_malloc_r+0x1e>
 80079b4:	680b      	ldr	r3, [r1, #0]
 80079b6:	1b5b      	subs	r3, r3, r5
 80079b8:	d418      	bmi.n	80079ec <_malloc_r+0x8c>
 80079ba:	2b0b      	cmp	r3, #11
 80079bc:	d90f      	bls.n	80079de <_malloc_r+0x7e>
 80079be:	600b      	str	r3, [r1, #0]
 80079c0:	50cd      	str	r5, [r1, r3]
 80079c2:	18cc      	adds	r4, r1, r3
 80079c4:	4630      	mov	r0, r6
 80079c6:	f000 f836 	bl	8007a36 <__malloc_unlock>
 80079ca:	f104 000b 	add.w	r0, r4, #11
 80079ce:	1d23      	adds	r3, r4, #4
 80079d0:	f020 0007 	bic.w	r0, r0, #7
 80079d4:	1ac3      	subs	r3, r0, r3
 80079d6:	d0d3      	beq.n	8007980 <_malloc_r+0x20>
 80079d8:	425a      	negs	r2, r3
 80079da:	50e2      	str	r2, [r4, r3]
 80079dc:	e7d0      	b.n	8007980 <_malloc_r+0x20>
 80079de:	428c      	cmp	r4, r1
 80079e0:	684b      	ldr	r3, [r1, #4]
 80079e2:	bf16      	itet	ne
 80079e4:	6063      	strne	r3, [r4, #4]
 80079e6:	6013      	streq	r3, [r2, #0]
 80079e8:	460c      	movne	r4, r1
 80079ea:	e7eb      	b.n	80079c4 <_malloc_r+0x64>
 80079ec:	460c      	mov	r4, r1
 80079ee:	6849      	ldr	r1, [r1, #4]
 80079f0:	e7cc      	b.n	800798c <_malloc_r+0x2c>
 80079f2:	1cc4      	adds	r4, r0, #3
 80079f4:	f024 0403 	bic.w	r4, r4, #3
 80079f8:	42a0      	cmp	r0, r4
 80079fa:	d005      	beq.n	8007a08 <_malloc_r+0xa8>
 80079fc:	1a21      	subs	r1, r4, r0
 80079fe:	4630      	mov	r0, r6
 8007a00:	f000 f808 	bl	8007a14 <_sbrk_r>
 8007a04:	3001      	adds	r0, #1
 8007a06:	d0cf      	beq.n	80079a8 <_malloc_r+0x48>
 8007a08:	6025      	str	r5, [r4, #0]
 8007a0a:	e7db      	b.n	80079c4 <_malloc_r+0x64>
 8007a0c:	200000b8 	.word	0x200000b8
 8007a10:	200000bc 	.word	0x200000bc

08007a14 <_sbrk_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4c06      	ldr	r4, [pc, #24]	; (8007a30 <_sbrk_r+0x1c>)
 8007a18:	2300      	movs	r3, #0
 8007a1a:	4605      	mov	r5, r0
 8007a1c:	4608      	mov	r0, r1
 8007a1e:	6023      	str	r3, [r4, #0]
 8007a20:	f7f9 f810 	bl	8000a44 <_sbrk>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d102      	bne.n	8007a2e <_sbrk_r+0x1a>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	b103      	cbz	r3, 8007a2e <_sbrk_r+0x1a>
 8007a2c:	602b      	str	r3, [r5, #0]
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	200007bc 	.word	0x200007bc

08007a34 <__malloc_lock>:
 8007a34:	4770      	bx	lr

08007a36 <__malloc_unlock>:
 8007a36:	4770      	bx	lr

08007a38 <_init>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr

08007a44 <_fini>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	bf00      	nop
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr
